{
	"info": {
		"_postman_id": "3afca60d-11d9-49e2-9902-1d84b6532fea",
		"name": "Directory Service (Repo)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "16237616"
	},
	"item": [
		{
			"name": "M1 - Apps",
			"item": [
				{
					"name": "Read App",
					"item": [
						{
							"name": "List all apps",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query ListApps {\n  listApps(callingAppId: \"{{callingAppId}}\") {\n    id\n    name\n    metadata {\n      properties {\n        format\n        key\n        type\n      }\n      required\n      schema\n      searchable\n      suggestible\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get DirectoryService App by ID",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query GetAppById {\n    getAppById(appId: \"{{directoryServiceAppId}}\", callingAppId: \"{{callingAppId}}\") {\n    id\n    name\n    metadata {\n      properties {\n        format\n        key\n        type\n      }\n      required\n      schema\n      searchable\n      suggestible\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Example App by ID",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query GetAppById {\n    getAppById(appId: \"{{exampleAppId}}\", callingAppId: \"{{callingAppId}}\") {\n    id\n    name\n    metadata {\n      properties {\n        format\n        key\n        type\n      }\n      required\n      schema\n      searchable\n      suggestible\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get App by ID",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query GetAppById($appId: ID!) {\n    getAppById(appId: $appId, callingAppId: \"{{exampleAppId}}\") {\n    id\n    name\n    metadata {\n      properties {\n        format\n        key\n        type\n      }\n      required\n      schema\n      searchable\n      suggestible\n    }\n  }\n}\n",
										"variables": "{\n    \"appId\": \"{{exampleAppId}}\"\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Create App",
					"item": [
						{
							"name": "Errors",
							"item": [
								{
									"name": "Empty metadata",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation CreateSococoApp {\n    createApp(input: {callingAppId: \"{{directoryServiceAppId}}\", metadata: \"{}\", name: \"Sococo\"}) {\n    ... on ChangeAppPayload {\n      __typename\n      success\n      app {\n        id\n        metadata {\n          suggestible\n          searchable\n          schema\n          required\n          properties {\n            format\n            key\n            type\n          }\n        }\n        name\n      }\n    }\n    ... on InvalidAppConfig {\n      errorMessage\n      errorCode\n    }\n    ... on AppNotFound {\n      errorMessage\n      errorCode\n    }\n  }\n}\n",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{apiEndpoint}}",
											"host": [
												"{{apiEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Missing searchable",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation CreateSococoApp {\n    createApp(input: {callingAppId: \"{{directoryServiceAppId}}\", metadata: \"{{invalidAppConfigMissingSearchable}}\", name: \"Sococo\"}) {\n    ... on ChangeAppPayload {\n      __typename\n      success\n      app {\n        id\n        metadata {\n          suggestible\n          searchable\n          schema\n          required\n          properties {\n            format\n            key\n            type\n          }\n        }\n        name\n      }\n    }\n    ... on InvalidAppConfig {\n      errorMessage\n      errorCode\n    }\n    ... on AppNotFound {\n      errorMessage\n      errorCode\n    }\n  }\n}\n",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{apiEndpoint}}",
											"host": [
												"{{apiEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid searchable",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation CreateSococoApp {\n    createApp(input: {callingAppId: \"{{directoryServiceAppId}}\", metadata: \"{{invalidAppConfigSearchable}}\", name: \"Sococo\"}) {\n    ... on ChangeAppPayload {\n      __typename\n      success\n      app {\n        id\n        metadata {\n          suggestible\n          searchable\n          schema\n          required\n          properties {\n            format\n            key\n            type\n          }\n        }\n        name\n      }\n    }\n    ... on InvalidAppConfig {\n      errorMessage\n      errorCode\n    }\n    ... on AppNotFound {\n      errorMessage\n      errorCode\n    }\n  }\n}\n",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{apiEndpoint}}",
											"host": [
												"{{apiEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid searchable/suggestible",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation CreateSococoApp {\n    createApp(input: {callingAppId: \"{{directoryServiceAppId}}\", metadata: \"{{invalidAppConfigMissingSearchableSuggestible}}\", name: \"Sococo\"}) {\n    ... on ChangeAppPayload {\n      __typename\n      success\n      app {\n        id\n        metadata {\n          suggestible\n          searchable\n          schema\n          required\n          properties {\n            format\n            key\n            type\n          }\n        }\n        name\n      }\n    }\n    ... on InvalidAppConfig {\n      errorMessage\n      errorCode\n    }\n    ... on AppNotFound {\n      errorMessage\n      errorCode\n    }\n  }\n}\n",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{apiEndpoint}}",
											"host": [
												"{{apiEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Missing suggestible",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation CreateSococoApp {\n    createApp(input: {callingAppId: \"{{directoryServiceAppId}}\", metadata: \"{{invalidAppConfigMissingSuggestible}}\", name: \"Sococo\"}) {\n    ... on ChangeAppPayload {\n      __typename\n      success\n      app {\n        id\n        metadata {\n          suggestible\n          searchable\n          schema\n          required\n          properties {\n            format\n            key\n            type\n          }\n        }\n        name\n      }\n    }\n    ... on InvalidAppConfig {\n      errorMessage\n      errorCode\n    }\n    ... on AppNotFound {\n      errorMessage\n      errorCode\n    }\n  }\n}\n",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{apiEndpoint}}",
											"host": [
												"{{apiEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Missing Schema URL",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation CreateSococoApp {\n    createApp(input: {callingAppId: \"{{directoryServiceAppId}}\", metadata: \"{{invalidAppConfigMissingSchemaUrl}}\", name: \"Sococo\"}) {\n    ... on ChangeAppPayload {\n      __typename\n      success\n      app {\n        id\n        metadata {\n          suggestible\n          searchable\n          schema\n          required\n          properties {\n            format\n            key\n            type\n          }\n        }\n        name\n      }\n    }\n    ... on InvalidAppConfig {\n      errorMessage\n      errorCode\n    }\n    ... on AppNotFound {\n      errorMessage\n      errorCode\n    }\n  }\n}\n",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{apiEndpoint}}",
											"host": [
												"{{apiEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Schema URL",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation CreateSococoApp {\n    createApp(input: {callingAppId: \"{{directoryServiceAppId}}\", metadata: \"{{invalidAppConfigSchemaUrl}}\", name: \"Sococo\"}) {\n    ... on ChangeAppPayload {\n      __typename\n      success\n      app {\n        id\n        metadata {\n          suggestible\n          searchable\n          schema\n          required\n          properties {\n            format\n            key\n            type\n          }\n        }\n        name\n      }\n    }\n    ... on InvalidAppConfig {\n      errorMessage\n      errorCode\n    }\n    ... on AppNotFound {\n      errorMessage\n      errorCode\n    }\n  }\n}\n",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{apiEndpoint}}",
											"host": [
												"{{apiEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Duplicate name",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation CreateSococoApp {\n    createApp(input: {callingAppId: \"{{directoryServiceAppId}}\", metadata: \"{{validAppConfig}}\", name: \"Example App\"}) {\n    ... on ChangeAppPayload {\n      __typename\n      success\n      app {\n        id\n        metadata {\n          suggestible\n          searchable\n          schema\n          required\n          properties {\n            format\n            key\n            type\n          }\n        }\n        name\n      }\n    }\n    ... on InvalidAppConfig {\n      errorMessage\n      errorCode\n    }\n    ... on AppNotFound {\n      errorMessage\n      errorCode\n    }\n  }\n}\n",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{apiEndpoint}}",
											"host": [
												"{{apiEndpoint}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Create Chess App",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation CreateSococoApp($appName: String!, $appMetadata: AWSJSON!) {\n    createApp(input: {callingAppId: \"{{directoryServiceAppId}}\", metadata: $appMetadata, name: $appName}) {\n    ... on ChangeAppPayload {\n      __typename\n      success\n      app {\n        id\n        metadata {\n          suggestible\n          searchable\n          schema\n          required\n          properties {\n            format\n            key\n            type\n          }\n        }\n        name\n      }\n    }\n    ... on InvalidAppConfig {\n      errorMessage\n      errorCode\n    }\n    ... on AppNotFound {\n      errorMessage\n      errorCode\n    }\n  }\n}\n",
										"variables": "{\n    \"appName\": \"Chess\",\n    \"appMetadata\": \"{{chessAppConfig}}\"\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Sococo App",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation CreateSococoApp($appName: String!, $appMetadata: AWSJSON!) {\n    createApp(input: {callingAppId: \"{{directoryServiceAppId}}\", metadata: $appMetadata, name: $appName}) {\n    ... on ChangeAppPayload {\n      __typename\n      success\n      app {\n        id\n        metadata {\n          suggestible\n          searchable\n          schema\n          required\n          properties {\n            format\n            key\n            type\n          }\n        }\n        name\n      }\n    }\n    ... on InvalidAppConfig {\n      errorMessage\n      errorCode\n    }\n    ... on AppNotFound {\n      errorMessage\n      errorCode\n    }\n  }\n}\n",
										"variables": "{\n    \"appName\": \"Sococo\",\n    \"appMetadata\": \"{{sococoAppConfig}}\"\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Update App Metadata",
					"item": [
						{
							"name": "Errors",
							"item": [
								{
									"name": "Empty metadata",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation UpdateApp ($appId: ID!) {\n    updateAppMetadata(input: {callingAppId: $appId, targetAppId: $appId, metadata: \"{}\"})  {\n    ... on ChangeAppPayload {\n      __typename\n      success\n      app {\n        id\n        metadata {\n          suggestible\n          searchable\n          schema\n          required\n          properties {\n            format\n            key\n            type\n          }\n        }\n        name\n      }\n    }\n    ... on InvalidAppConfig {\n      errorMessage\n      errorCode\n    }\n    ... on AppNotFound {\n      errorMessage\n      errorCode\n    }\n  }\n}\n\n",
												"variables": "{\n    \"appId\": \"{{sococoAppId}}\"\n}"
											}
										},
										"url": {
											"raw": "{{apiEndpoint}}",
											"host": [
												"{{apiEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Missing searchable",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation UpdateApp ($appId: ID!) {\n    updateAppMetadata(input: {callingAppId: $appId, targetAppId: $appId, metadata: \"{{invalidAppConfigMissingSearchable}}\"}) {\n    ... on ChangeAppPayload {\n      __typename\n      success\n      app {\n        id\n        metadata {\n          suggestible\n          searchable\n          schema\n          required\n          properties {\n            format\n            key\n            type\n          }\n        }\n        name\n      }\n    }\n    ... on InvalidAppConfig {\n      errorMessage\n      errorCode\n    }\n    ... on AppNotFound {\n      errorMessage\n      errorCode\n    }\n  }\n}\n",
												"variables": "{\n    \"appId\": \"{{sococoAppId}}\"\n}"
											}
										},
										"url": {
											"raw": "{{apiEndpoint}}",
											"host": [
												"{{apiEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid searchable",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation UpdateApp ($appId: ID!) {\n    updateAppMetadata(input: {callingAppId: $appId, targetAppId: $appId, metadata: \"{{invalidAppConfigSearchable}}\"}) {\n    ... on ChangeAppPayload {\n      __typename\n      success\n      app {\n        id\n        metadata {\n          suggestible\n          searchable\n          schema\n          required\n          properties {\n            format\n            key\n            type\n          }\n        }\n        name\n      }\n    }\n    ... on InvalidAppConfig {\n      errorMessage\n      errorCode\n    }\n    ... on AppNotFound {\n      errorMessage\n      errorCode\n    }\n  }\n}\n",
												"variables": "{\n    \"appId\": \"{{sococoAppId}}\"\n}"
											}
										},
										"url": {
											"raw": "{{apiEndpoint}}",
											"host": [
												"{{apiEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid searchable/suggestible",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation UpdateApp ($appId: ID!) {\n    updateAppMetadata(input: {callingAppId: $appId, targetAppId: $appId, metadata: \"{{invalidAppConfigMissingSearchableSuggestible}}\"}) {\n    ... on ChangeAppPayload {\n      __typename\n      success\n      app {\n        id\n        metadata {\n          suggestible\n          searchable\n          schema\n          required\n          properties {\n            format\n            key\n            type\n          }\n        }\n        name\n      }\n    }\n    ... on InvalidAppConfig {\n      errorMessage\n      errorCode\n    }\n    ... on AppNotFound {\n      errorMessage\n      errorCode\n    }\n  }\n}\n",
												"variables": "{\n    \"appId\": \"{{sococoAppId}}\"\n}"
											}
										},
										"url": {
											"raw": "{{apiEndpoint}}",
											"host": [
												"{{apiEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Missing suggestible",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation UpdateApp ($appId: ID!) {\n    updateAppMetadata(input: {callingAppId: $appId, targetAppId: $appId, metadata: \"{{invalidAppConfigMissingSuggestible}}\"}) {\n    ... on ChangeAppPayload {\n      __typename\n      success\n      app {\n        id\n        metadata {\n          suggestible\n          searchable\n          schema\n          required\n          properties {\n            format\n            key\n            type\n          }\n        }\n        name\n      }\n    }\n    ... on InvalidAppConfig {\n      errorMessage\n      errorCode\n    }\n    ... on AppNotFound {\n      errorMessage\n      errorCode\n    }\n  }\n}\n",
												"variables": "{\n    \"appId\": \"{{sococoAppId}}\"\n}"
											}
										},
										"url": {
											"raw": "{{apiEndpoint}}",
											"host": [
												"{{apiEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Missing Schema URL",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation UpdateApp ($appId: ID!) {\n    updateAppMetadata(input: {callingAppId: $appId, targetAppId: $appId, metadata: \"{{invalidAppConfigMissingSchemaUrl}}\"}) {\n    ... on ChangeAppPayload {\n      __typename\n      success\n      app {\n        id\n        metadata {\n          suggestible\n          searchable\n          schema\n          required\n          properties {\n            format\n            key\n            type\n          }\n        }\n        name\n      }\n    }\n    ... on InvalidAppConfig {\n      errorMessage\n      errorCode\n    }\n    ... on AppNotFound {\n      errorMessage\n      errorCode\n    }\n  }\n}\n",
												"variables": "{\n    \"appId\": \"{{sococoAppId}}\"\n}"
											}
										},
										"url": {
											"raw": "{{apiEndpoint}}",
											"host": [
												"{{apiEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Schema URL",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation UpdateApp ($appId: ID!) {\n    updateAppMetadata(input: {callingAppId: $appId, targetAppId: $appId, metadata: \"{{invalidAppConfigSchemaUrl}}\"}) {\n    ... on ChangeAppPayload {\n      __typename\n      success\n      app {\n        id\n        metadata {\n          suggestible\n          searchable\n          schema\n          required\n          properties {\n            format\n            key\n            type\n          }\n        }\n        name\n      }\n    }\n    ... on InvalidAppConfig {\n      errorMessage\n      errorCode\n    }\n    ... on AppNotFound {\n      errorMessage\n      errorCode\n    }\n  }\n}\n",
												"variables": "{\n    \"appId\": \"{{sococoAppId}}\"\n}"
											}
										},
										"url": {
											"raw": "{{apiEndpoint}}",
											"host": [
												"{{apiEndpoint}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Update App Metadata",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation UpdateApp ($appId: ID!) {\n    updateAppMetadata(input: {callingAppId: $appId, targetAppId: $appId, metadata: \"{{validUpdatedAppConfigSchema}}\"}) {\n    ... on ChangeAppPayload {\n      __typename\n      success\n      app {\n        id\n        metadata {\n          suggestible\n          searchable\n          schema\n          required\n          properties {\n            format\n            key\n            type\n          }\n        }\n        name\n      }\n    }\n    ... on InvalidAppConfig {\n      errorMessage\n      errorCode\n    }\n    ... on AppNotFound {\n      errorMessage\n      errorCode\n    }\n  }\n}\n",
										"variables": "{\n    \"appId\": \"{{sococoAppId}}\"\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update App Metadata (enhance Sococo)",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation UpdateApp ($appId: ID!, $appMetadata: AWSJSON!) {\n    updateAppMetadata(input: {callingAppId: $appId, targetAppId: $appId, metadata: $appMetadata}) {\n    ... on ChangeAppPayload {\n      __typename\n      success\n      app {\n        id\n        metadata {\n          suggestible\n          searchable\n          schema\n          required\n          properties {\n            format\n            key\n            type\n          }\n        }\n        name\n      }\n    }\n    ... on InvalidAppConfig {\n      errorMessage\n      errorCode\n    }\n    ... on AppNotFound {\n      errorMessage\n      errorCode\n    }\n  }\n}\n",
										"variables": "{\n    \"appId\": \"{{sococoAppId}}\",\n    \"appMetadata\": \"{  \\\"$schema\\\": \\\"https://directory-service-schemas.s3.amazonaws.com/app-schema-01.json\\\",  \\\"properties\\\": {    \\\"birthday\\\": {      \\\"type\\\": \\\"string\\\"   },    \\\"sococoName\\\": {      \\\"type\\\": \\\"string\\\"   },\\\"title\\\": {      \\\"type\\\": \\\"string\\\"    }  },  \\\"searchable\\\": [\\\"birthday\\\",\\\"title\\\"],  \\\"suggestible\\\": [\\\"title\\\"],  \\\"required\\\": [\\\"title\\\", \\\"sococoName\\\"]}\"\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Update App Name",
					"item": [
						{
							"name": "Errors",
							"item": [
								{
									"name": "Existing name",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation UpdateApp ($appId: ID!, $appName: String!) {\n    updateApp(input: {callingAppId: $appId, targetAppId: $appId, name: $appName}) {\n    ... on ChangeAppPayload {\n      __typename\n      success\n      app {\n        id\n        metadata {\n          suggestible\n          searchable\n          schema\n          required\n          properties {\n            format\n            key\n            type\n          }\n        }\n        name\n      }\n    }\n    ... on InvalidAppConfig {\n      errorMessage\n      errorCode\n    }\n    ... on AppNotFound {\n      errorMessage\n      errorCode\n    }\n  }\n}\n",
												"variables": "{\n    \"appId\": \"{{chessAppId}}\",\n    \"appName\": \"Sococo\"\n}"
											}
										},
										"url": {
											"raw": "{{apiEndpoint}}",
											"host": [
												"{{apiEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Empty name",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation UpdateApp ($appId: ID!, $appName: String!) {\n    updateApp(input: {callingAppId: $appId, targetAppId: $appId, name: $appName}) {\n    ... on ChangeAppPayload {\n      __typename\n      success\n      app {\n        id\n        metadata {\n          suggestible\n          searchable\n          schema\n          required\n          properties {\n            format\n            key\n            type\n          }\n        }\n        name\n      }\n    }\n    ... on InvalidAppConfig {\n      errorMessage\n      errorCode\n    }\n    ... on AppNotFound {\n      errorMessage\n      errorCode\n    }\n  }\n}\n",
												"variables": "{\n    \"appId\": \"{{sococoAppId}}\",\n    \"appName\": \"\"\n}"
											}
										},
										"url": {
											"raw": "{{apiEndpoint}}",
											"host": [
												"{{apiEndpoint}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Update App Name",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation UpdateApp ($appId: ID!, $appName: String!) {\n    updateApp(input: {callingAppId: $appId, targetAppId: $appId, name: $appName}) {\n    ... on ChangeAppPayload {\n      __typename\n      success\n      app {\n        id\n        metadata {\n          suggestible\n          searchable\n          schema\n          required\n          properties {\n            format\n            key\n            type\n          }\n        }\n        name\n      }\n    }\n    ... on InvalidAppConfig {\n      errorMessage\n      errorCode\n    }\n    ... on AppNotFound {\n      errorMessage\n      errorCode\n    }\n  }\n}\n",
										"variables": "{\n    \"appId\": \"{{sococoAppId}}\",\n    \"appName\": \"Sococo\"\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete App",
					"item": [
						{
							"name": "Errors",
							"item": [
								{
									"name": "Delete App by 3rd party",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation DeleteApp ($appId: ID!, $callingAppId: ID!) {\n    deleteApp(input: {callingAppId: $callingAppId, targetAppId: $appId}) {\n    ... on ChangeAppPayload {\n      __typename\n      success\n      app {\n        id\n        metadata {\n          suggestible\n          searchable\n          schema\n          required\n          properties {\n            format\n            key\n            type\n          }\n        }\n        name\n      }\n    }\n    ... on InvalidAppConfig {\n      errorMessage\n      errorCode\n    }\n    ... on AppNotFound {\n      errorMessage\n      errorCode\n    }\n  }\n}\n",
												"variables": "{\n    \"appId\": \"{{sococoAppId}}\",\n    \"callingAppId\": \"{{exampleAppId}}\"\n}"
											}
										},
										"url": {
											"raw": "{{apiEndpoint}}",
											"host": [
												"{{apiEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete App by self",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation DeleteApp ($appId: ID!) {\n    deleteApp(input: {callingAppId: $appId, targetAppId: $appId}) {\n    ... on ChangeAppPayload {\n      __typename\n      success\n      app {\n        id\n        metadata {\n          suggestible\n          searchable\n          schema\n          required\n          properties {\n            format\n            key\n            type\n          }\n        }\n        name\n      }\n    }\n    ... on InvalidAppConfig {\n      errorMessage\n      errorCode\n    }\n    ... on AppNotFound {\n      errorMessage\n      errorCode\n    }\n  }\n}\n",
												"variables": "{\n    \"appId\": \"{{sococoAppId}}\"\n}"
											}
										},
										"url": {
											"raw": "{{apiEndpoint}}",
											"host": [
												"{{apiEndpoint}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Delete App",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation DeleteApp ($appId: ID!) {\n    deleteApp(input: {callingAppId: \"{{directoryServiceAppId}}\", targetAppId: $appId}) {\n    ... on ChangeAppPayload {\n      __typename\n      success\n      app {\n        id\n        metadata {\n          suggestible\n          searchable\n          schema\n          required\n          properties {\n            format\n            key\n            type\n          }\n        }\n        name\n      }\n    }\n    ... on InvalidAppConfig {\n      errorMessage\n      errorCode\n    }\n    ... on AppNotFound {\n      errorMessage\n      errorCode\n    }\n  }\n}\n",
										"variables": "{\n    \"appId\": \"{{sococoAppId}}\"\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "M2 - Person",
			"item": [
				{
					"name": "Create a new Person",
					"item": [
						{
							"name": "Errors",
							"item": [
								{
									"name": "no AppData",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation CreatePerson($callingAppId: ID!, $familyName: String!, $givenName: String!, $primaryEmail: AWSEmail!) {\n    createPerson(input: {callingAppId: $callingAppId, familyName: $familyName, givenName: $givenName, primaryEmail: $primaryEmail}) {\n        __typename\n        ... on ChangePersonPayload {\n            person {\n                id\n                data {\n                    __typename\n                    ... on AppData {\n                        app {\n                            id\n                            name\n                        }\n                        data {\n                            key\n                            value\n                        }\n                    }\n                    ... on OrgData {\n                        org {\n                            id\n                            name\n                        }\n                        data {\n                            key\n                            value\n                        }\n                    }\n                }\n            }\n            success\n        }\n        ... on Error {\n            errorMessage\n            errorCode\n        }\n    }\n}\n",
												"variables": "{\n    \"familyName\": \"Lima\",\n    \"givenName\": \"Leonardo\",\n    \"primaryEmail\": \"leonardo.lima@trilogy.com\",\n    \"callingAppId\": \"{{sococoAppId}}\"\n}"
											}
										},
										"url": {
											"raw": "{{apiEndpoint}}",
											"host": [
												"{{apiEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "invalid AppData",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation CreatePerson($callingAppId: ID!, $appData: AWSJSON!, $familyName: String!, $givenName: String!, $primaryEmail: AWSEmail!) {\n  createPerson(input: {callingAppId: $callingAppId, familyName: $familyName, givenName: $givenName, primaryEmail: $primaryEmail, appData: $appData}) {\n    __typename\n        ... on ChangePersonPayload {\n            person {\n                id\n                data {\n                    __typename\n                    ... on AppData {\n                        app {\n                            id\n                            name\n                        }\n                        data {\n                            key\n                            value\n                        }\n                    }\n                    ... on OrgData {\n                        org {\n                            id\n                            name\n                        }\n                        data {\n                            key\n                            value\n                        }\n                    }\n                }\n            }\n            success\n        }\n        ... on Error {\n            errorMessage\n            errorCode\n        }\n    }\n}\n",
												"variables": "{\n    \"familyName\": \"Lima\",\n    \"givenName\": \"Leonardo\",\n    \"primaryEmail\": \"leonardo.lima@trilogy.com\",\n    \"appData\": \"{  \\\"userId\\\": \\\"leonardo.lima@trilogy\\\",  \\\"homeRoom\\\": \\\"EngineeringOffice-69\\\",  \\\"sococoName\\\": \\\"Leonardo Lima\\\",  \\\"initials\\\": \\\"LL\\\",    \\\"presenceStatus\\\": \\\"Available\\\",  \\\"presenceText\\\": \\\"Available\\\"}\",\n    \"callingAppId\": \"{{sococoAppId}}\"\n\n}"
											}
										},
										"url": {
											"raw": "{{apiEndpoint}}",
											"host": [
												"{{apiEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "invalid email",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation CreatePerson($callingAppId: ID!, $familyName: String!, $givenName: String!, $primaryEmail: AWSEmail!) {\n  createPerson(input: {callingAppId: $callingAppId, familyName: $familyName, givenName: $givenName, primaryEmail: $primaryEmail}) {\n    __typename\n        ... on ChangePersonPayload {\n            person {\n                id\n                data {\n                    __typename\n                    ... on AppData {\n                        app {\n                            id\n                            name\n                        }\n                        data {\n                            key\n                            value\n                        }\n                    }\n                    ... on OrgData {\n                        org {\n                            id\n                            name\n                        }\n                        data {\n                            key\n                            value\n                        }\n                    }\n                }\n            }\n            success\n        }\n        ... on Error {\n            errorMessage\n            errorCode\n        }\n    }\n}\n",
												"variables": "{\n    \"familyName\": \"Lima\",\n    \"givenName\": \"Leonardo\",\n    \"primaryEmail\": \"leonardo.lima@trilogy\",\n    \"callingAppId\": \"{{sococoAppId}}\"\n}"
											}
										},
										"url": {
											"raw": "{{apiEndpoint}}",
											"host": [
												"{{apiEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "invalid email #2",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation CreatePerson($callingAppId: ID!, $familyName: String!, $givenName: String!, $primaryEmail: AWSEmail!) {\n  createPerson(input: {callingAppId: $callingAppId, familyName: $familyName, givenName: $givenName, primaryEmail: $primaryEmail}) {\n    __typename\n        ... on ChangePersonPayload {\n            person {\n                id\n                data {\n                    __typename\n                    ... on AppData {\n                        app {\n                            id\n                            name\n                        }\n                        data {\n                            key\n                            value\n                        }\n                    }\n                    ... on OrgData {\n                        org {\n                            id\n                            name\n                        }\n                        data {\n                            key\n                            value\n                        }\n                    }\n                }\n            }\n            success\n        }\n        ... on Error {\n            errorMessage\n            errorCode\n        }\n    }\n}\n",
												"variables": "{\n    \"familyName\": \"Lima\",\n    \"givenName\": \"Leonardo\",\n    \"primaryEmail\": \"leonardo.lima\",\n    \"callingAppId\": \"{{sococoAppId}}\"\n}"
											}
										},
										"url": {
											"raw": "{{apiEndpoint}}",
											"host": [
												"{{apiEndpoint}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Create new Person (Sococo)",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation CreatePerson($callingAppId: ID!, $appData: AWSJSON, $familyName: String!, $givenName: String!, $primaryEmail: AWSEmail!) {\n  createPerson(input: {appData: $appData, callingAppId: $callingAppId, familyName: $familyName, givenName: $givenName, primaryEmail: $primaryEmail}) {\n    __typename\n        ... on ChangePersonPayload {\n            person {\n                id\n                data {\n                    __typename\n                    ... on AppData {\n                        app {\n                            id\n                            name\n                        }\n                        data {\n                            key\n                            value\n                        }\n                    }\n                    ... on OrgData {\n                        org {\n                            id\n                            name\n                        }\n                        data {\n                            key\n                            value\n                        }\n                    }\n                }\n            }\n            success\n        }\n        ... on Error {\n            errorMessage\n            errorCode\n        }\n    }\n}\n",
										"variables": "{\n    \"familyName\": \"de Moura Rocha Lima\",\n    \"givenName\": \"Leonardo\",\n    \"primaryEmail\": \"leonardo.lima@trilogy.com\",\n    \"appData\": \"{  \\\"title\\\": \\\"VP of Engineering\\\",  \\\"birthday\\\": \\\"08/15/1982\\\"}\",\n    \"callingAppId\": \"{{sococoAppId}}\"\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new Person (Chess)",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation CreatePerson($callingAppId: ID!, $appData: AWSJSON, $familyName: String!, $givenName: String!, $primaryEmail: AWSEmail!) {\n  createPerson(input: {appData: $appData, callingAppId: $callingAppId, familyName: $familyName, givenName: $givenName, primaryEmail: $primaryEmail}) {\n    __typename\n        ... on ChangePersonPayload {\n            person {\n                id\n                data {\n                    __typename\n                    ... on AppData {\n                        app {\n                            id\n                            name\n                        }\n                        data {\n                            key\n                            value\n                        }\n                    }\n                    ... on OrgData {\n                        org {\n                            id\n                            name\n                        }\n                        data {\n                            key\n                            value\n                        }\n                    }\n                }\n            }\n            success\n        }\n        ... on Error {\n            errorMessage\n            errorCode\n        }\n    }\n}\n",
										"variables": "{\n    \"callingAppId\": \"{{chessAppId}}\",\n    \"familyName\": \"de Moura\",\n    \"givenName\": \"Leonardo\",\n    \"primaryEmail\": \"leonardo.demoura@trilogy.com\",\n    \"appData\": \"{  \\\"username\\\": \\\"lmrlima\\\",  \\\"ranking\\\": 1}\"\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Update a Person’s DirectoryData",
					"item": [
						{
							"name": "Errors",
							"item": [
								{
									"name": "Invalid e-mail",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation UpdatePerson($targetPersonId: ID!, $familyName: String!, $givenName: String!, $primaryEmail: AWSEmail!) {\n  updatePerson(input: {targetPersonId: $targetPersonId, callingAppId: \"{{sococoAppId}}\", familyName: $familyName, givenName: $givenName, primaryEmail: $primaryEmail}) {\n    __typename\n        ... on ChangePersonPayload {\n            person {\n                id\n                data {\n                    __typename\n                    ... on AppData {\n                        app {\n                            id\n                            name\n                        }\n                        data {\n                            key\n                            value\n                        }\n                    }\n                    ... on OrgData {\n                        org {\n                            id\n                            name\n                        }\n                        data {\n                            key\n                            value\n                        }\n                    }\n                }\n            }\n            success\n        }\n        ... on Error {\n            errorMessage\n            errorCode\n        }\n    }\n}\n",
												"variables": "{\n    \"targetPersonId\": \"{{sococoPersonId}}\",\n    \"familyName\": \"Rocha Lima\",\n    \"givenName\": \"Leonardo\",\n    \"primaryEmail\": \"leonardo.lima@trilogy\"\n}"
											}
										},
										"url": {
											"raw": "{{apiEndpoint}}",
											"host": [
												"{{apiEndpoint}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Update a Person’s DirectoryData Copy",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation UpdatePerson($callingAppId: ID!, $targetPersonId: ID!, $familyName: String!, $givenName: String!, $primaryEmail: AWSEmail!) {\n  updatePerson(input: {targetPersonId: $targetPersonId, callingAppId: $callingAppId, familyName: $familyName, givenName: $givenName, primaryEmail: $primaryEmail}) {\n    __typename\n        ... on ChangePersonPayload {\n            person {\n                id\n                data {\n                    __typename\n                    ... on AppData {\n                        app {\n                            id\n                            name\n                        }\n                        data {\n                            key\n                            value\n                        }\n                    }\n                    ... on OrgData {\n                        org {\n                            id\n                            name\n                        }\n                        data {\n                            key\n                            value\n                        }\n                    }\n                }\n            }\n            success\n        }\n        ... on Error {\n            errorMessage\n            errorCode\n        }\n    }\n}\n",
										"variables": "{\n    \"callingAppId\": \"{{sococoAppId}}\",\n    \"targetPersonId\": \"{{sococoPersonId}}\",\n    \"familyName\": \"Lima\",\n    \"givenName\": \"Leonardo\",\n    \"primaryEmail\": \"leonardo.lima@trilogy.com\"\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete a Person",
					"item": [
						{
							"name": "Errors",
							"item": [
								{
									"name": "Still using App",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation DeletePerson($callingAppId: ID!, $targetPersonId: ID!) {\n  deletePerson(input: {callingAppId: $callingAppId, personId: $targetPersonId}) {\n    __typename\n        ... on ChangePersonPayload {\n            person {\n                id\n                data {\n                    __typename\n                    ... on AppData {\n                        app {\n                            id\n                            name\n                        }\n                        data {\n                            key\n                            value\n                        }\n                    }\n                    ... on OrgData {\n                        org {\n                            id\n                            name\n                        }\n                        data {\n                            key\n                            value\n                        }\n                    }\n                }\n            }\n            success\n        }\n        ... on Error {\n            errorMessage\n            errorCode\n        }\n    }\n}\n",
												"variables": "{\n    \"callingAppId\": \"{{sococoAppId}}\",\n    \"targetPersonId\": \"{{sococoPersonId}}\"\n}"
											}
										},
										"url": {
											"raw": "{{apiEndpoint}}",
											"host": [
												"{{apiEndpoint}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Get a Person by ID",
					"item": [
						{
							"name": "Get Person by ID (self query)",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query GetPersonById($callingAppId: ID!, $personId: ID!) {\n    getPersonById(callingAppId: $callingAppId, callingPersonId: $personId, targetPersonId: $personId) {\n        id\n        data {\n            __typename\n            ... on AppData {\n                app {\n                    id\n                    name\n                }\n                data {\n                    key\n                    value\n                }\n            }\n            ... on OrgData {\n                org {\n                    id\n                    name\n                }\n                data {\n                    key\n                    value\n                }\n            }\n        }\n    }\n}",
										"variables": "{\n    \"callingAppId\": \"{{directoryServiceAppId}}\",\n    \"personId\": \"{{examplePersonId}}\"\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Person by ID (Sococo)",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query GetPersonById($callingAppId: ID!, $personId: ID!) {\n  getPersonById(callingAppId: $callingAppId, callingPersonId: $personId, targetPersonId: $personId) {\n        id\n        data {\n            __typename\n            ... on AppData {\n                app {\n                    id\n                    name\n                }\n                data {\n                    key\n                    value\n                }\n            }\n            ... on OrgData {\n                org {\n                    id\n                    name\n                }\n                data {\n                    key\n                    value\n                }\n            }\n        }\n    }\n}",
										"variables": "{\n    \"callingAppId\": \"{{sococoAppId}}\",\n    \"personId\": \"{{sococoPersonId}}\"\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Add AppData to a Person",
					"item": [
						{
							"name": "Errors",
							"item": [
								{
									"name": "invalid AppData",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation CreateAppData($callingAppId: ID!, $appData: AWSJSON!, $personId: ID!) {\n  createAppData(input: {appData: $appData, callingAppId: $callingAppId, personId: $personId}) {\n    __typename\n    ... on ChangeAppDataPayload {\n      success\n    }\n    ... on Error {\n      errorMessage\n      errorCode\n    }\n  }\n}\n",
												"variables": "{\n    \"callingAppId\": \"{{sococoAppId}}\",\n    \"personId\": \"{{sococoPersonId}}\",\n    \"appData\": \"{  \\\"ranking\\\": \\\"1\\\"}\"\n}"
											}
										},
										"url": {
											"raw": "{{apiEndpoint}}",
											"host": [
												"{{apiEndpoint}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Add Person to Chess",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation CreateAppData($chessAppId: ID!, $appData: AWSJSON!, $personId: ID!) {\n  createAppData(input: {appData: $appData, callingAppId: $chessAppId, personId: $personId}) {\n    __typename\n    ... on ChangeAppDataPayload {\n      success\n    }\n    ... on Error {\n      errorMessage\n      errorCode\n    }\n  }\n}\n",
										"variables": "{\n    \"chessAppId\": \"{{chessAppId}}\",\n    \"personId\": \"{{sococoPersonId}}\",\n    \"appData\": \"{  \\\"username\\\": \\\"lmrlima\\\",  \\\"ranking\\\": 1}\"\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Update a Person’s AppData",
					"item": [
						{
							"name": "Errors",
							"item": [
								{
									"name": "invalid AppData (self-change) (Chess)",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation UpdateAppData($callingAppId: ID!, $appData: AWSJSON!, $personId: ID!) {\n  updateAppData(input: {appData: $appData, callingAppId: $callingAppId, targetAppId: $callingAppId, personId: $personId}) {\n    __typename\n    ... on ChangeAppDataPayload {\n      success\n    }\n    ... on Error {\n      errorMessage\n      errorCode\n    }\n  }\n}\n",
												"variables": "{\n    \"callingAppId\": \"{{sococoAppId}}\",\n    \"personId\": \"{{sococoPersonId}}\",\n    \"appData\": \"{  \\\"ranking\\\": \\\"1\\\"}\"\n}"
											}
										},
										"url": {
											"raw": "{{apiEndpoint}}",
											"host": [
												"{{apiEndpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "invalid AppData (self-change) (enhanced Sococo)",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation UpdateAppData($callingAppId: ID!, $appData: AWSJSON!, $personId: ID!) {\n  updateAppData(input: {appData: $appData, callingAppId: $callingAppId, targetAppId: $callingAppId, personId: $personId}) {\n    __typename\n    ... on ChangeAppDataPayload {\n      success\n    }\n    ... on Error {\n      errorMessage\n      errorCode\n    }\n  }\n}\n",
												"variables": "{\n    \"callingAppId\": \"{{sococoAppId}}\",\n    \"personId\": \"{{sococoPersonId}}\",\n    \"appData\": \"{ \\\"username\\\": \\\"lmrlima\\\", \\\"ranking\\\": \\\"2\\\"}\"\n}"
											}
										},
										"url": {
											"raw": "{{apiEndpoint}}",
											"host": [
												"{{apiEndpoint}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Update AppData (self-change) (Chess)",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation UpdateAppData($callingAppId: ID!, $appData: AWSJSON!, $personId: ID!) {\n  updateAppData(input: {appData: $appData, callingAppId: $callingAppId, targetAppId: $callingAppId, personId: $personId}) {\n    __typename\n    ... on ChangeAppDataPayload {\n      success\n    }\n    ... on Error {\n      errorMessage\n      errorCode\n    }\n  }\n}\n",
										"variables": "{\n    \"callingAppId\": \"{{chessAppId}}\",\n    \"personId\": \"{{sococoPersonId}}\",\n    \"appData\": \"{ \\\"username\\\": \\\"lmrlima\\\", \\\"ranking\\\": 2}\"\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update AppData (other-change) (Sococo -> Chess)",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation UpdateAppData($callingAppId: ID!, $targetAppId: ID!, $appData: AWSJSON!, $personId: ID!) {\n  updateAppData(input: {appData: $appData, callingAppId: $callingAppId, targetAppId: $targetAppId, personId: $personId}) {\n    __typename\n    ... on ChangeAppDataPayload {\n      success\n    }\n    ... on Error {\n      errorMessage\n      errorCode\n    }\n  }\n}\n",
										"variables": "{\n    \"callingAppId\": \"{{sococoAppId}}\",\n    \"targetAppId\": \"{{chessAppId}}\",\n    \"personId\": \"{{sococoPersonId}}\",\n    \"appData\": \"{ \\\"ranking\\\": 3}\"\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete a Person from the App",
					"item": [
						{
							"name": "Delete from Chess",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation DeleteAppData($callingAppId: ID!, $personId: ID!) {\n  deleteAppData(input: {callingAppId: $callingAppId, personId: $personId}) {\n    __typename\n    ... on ChangeAppDataPayload {\n      success\n    }\n    ... on Error {\n      errorMessage\n      errorCode\n    }\n  }\n}\n",
										"variables": "{\n    \"callingAppId\": \"{{chessAppId}}\",\n    \"personId\": \"{{sococoPersonId}}\"\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "M3 - Privacy controls",
			"item": [
				{
					"name": "Setup",
					"item": [
						{
							"name": "1. Create Chess App",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation CreateSococoApp($appName: String!, $appMetadata: AWSJSON!) {\n    createApp(input: {callingAppId: \"{{directoryServiceAppId}}\", metadata: $appMetadata, name: $appName}) {\n    ... on ChangeAppPayload {\n      __typename\n      success\n      app {\n        id\n        metadata {\n          suggestible\n          searchable\n          schema\n          required\n          properties {\n            format\n            key\n            type\n          }\n        }\n        name\n      }\n    }\n    ... on InvalidAppConfig {\n      errorMessage\n      errorCode\n    }\n    ... on AppNotFound {\n      errorMessage\n      errorCode\n    }\n  }\n}\n",
										"variables": "{\n    \"appName\": \"Chess\",\n    \"appMetadata\": \"{{chessAppConfig}}\"\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. Create Sococo App",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation CreateSococoApp($appName: String!, $appMetadata: AWSJSON!) {\n    createApp(input: {callingAppId: \"{{directoryServiceAppId}}\", metadata: $appMetadata, name: $appName}) {\n    ... on ChangeAppPayload {\n      __typename\n      success\n      app {\n        id\n        metadata {\n          suggestible\n          searchable\n          schema\n          required\n          properties {\n            format\n            key\n            type\n          }\n        }\n        name\n      }\n    }\n    ... on InvalidAppConfig {\n      errorMessage\n      errorCode\n    }\n    ... on AppNotFound {\n      errorMessage\n      errorCode\n    }\n  }\n}\n",
										"variables": "{\n    \"appName\": \"Sococo\",\n    \"appMetadata\": \"{{sococoAppConfig}}\"\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "3. Create Joe Bloggs",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation CreatePerson($sococoAppId: ID!, $appData: AWSJSON, $familyName: String!, $givenName: String!, $primaryEmail: AWSEmail!) {\n  createPerson(input: {appData: $appData, callingAppId: $sococoAppId, familyName: $familyName, givenName: $givenName, primaryEmail: $primaryEmail}) {\n    __typename\n    __typename\n    ... on ChangePersonPayload {\n      person { id data {\n    ... on AppData {\n      __typename\n      app {\n        id\n        metadata {\n          properties {\n            format\n            key\n            type\n          }\n          required\n          schema\n          searchable\n          suggestible\n        }\n        name\n      }\n      data {\n        key value\n      }\n    }\n    ... on OrgData {\n      __typename\n      org {\n        id\n        metadata {\n          properties {\n            format\n            key\n            type\n          }\n          required\n          schema\n          searchable\n          suggestible\n        }\n        name\n      }\n      data {\n        key value\n      }\n    }\n  }\n  privacy {\n    public {\n      origin {\n        __typename\n        id\n        metadata {\n          properties {\n            format\n            key\n            type\n          }\n          required\n          schema\n          searchable\n          suggestible\n        }\n        name\n      }\n      property { key type format }\n    }\n  }\n  sharing {\n    permittedOrigin {\n      __typename\n      id\n      metadata {\n        properties {\n          format\n          key\n          type\n        }\n        required\n        schema\n        searchable\n        suggestible\n      }\n      name\n    }\n    read {\n      origin {\n        __typename\n        id\n        metadata {\n          properties {\n            format\n            key\n            type\n          }\n          required\n          schema\n          searchable\n          suggestible\n        }\n        name\n      }\n      property { key type format }\n    }\n    write {\n      origin {\n        __typename\n        id\n        metadata {\n          properties {\n            format\n            key\n            type\n          }\n          required\n          schema\n          searchable\n          suggestible\n        }\n        name\n      }\n      property { key type format }\n    }\n  }}\n      success\n    }\n    ... on Error {\n      errorMessage\n      errorCode\n    }\n  }\n}\n",
										"variables": "{\n    \"familyName\": \"Bloggs\",\n    \"givenName\": \"Joe\",\n    \"primaryEmail\": \"joe@gmail.com\",\n    \"appData\": \"{  \\\"title\\\": \\\"Blogger\\\",  \\\"birthday\\\": \\\"04/21/1959\\\"}\",\n    \"sococoAppId\": \"{{sococoAppId}}\"\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "4. Add Joe to Chess",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation CreateAppData($chessAppId: ID!, $appData: AWSJSON!, $personId: ID!) {\n  createAppData(input: {appData: $appData, callingAppId: $chessAppId, personId: $personId}) {\n    __typename\n    ... on ChangeAppDataPayload {\n      success\n    }\n        ... on InvalidAppData {\n      errorMessage\n      errorCode\n    }\n    ... on AppNotFound {\n      errorMessage\n      errorCode\n    }\n    ... on PersonNotFound {\n      errorMessage\n      errorCode\n    }\n  }\n}\n",
										"variables": "{\n    \"chessAppId\": \"{{chessAppId}}\",\n    \"personId\": \"{{m3JoeId}}\",\n    \"appData\": \"{  \\\"username\\\": \\\"joeb\\\",  \\\"ranking\\\": 1}\"\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get Joe from Chess",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query GetPersonById($chessAppId: ID!, $personId: ID!) {\n    getPersonById(callingAppId: $chessAppId, callingPersonId: $personId, targetPersonId: $personId) {\n        data {\n            __typename\n            ... on AppData {\n                app {\n                    name\n                }\n                data {\n                    key\n                    value\n                }\n            }\n            ... on OrgData {\n                org {\n                    name\n                }\n                data {\n                    key\n                    value\n                }\n            }\n        }\n        privacy {\n            public {\n                origin {\n                    __typename\n                    name\n                }\n                property {\n                    key\n                }\n            }\n        }\n        sharing {\n            permittedOrigin {\n                __typename\n                name\n            }\n            read {\n                property {\n                    key\n                }\n            }\n            write {\n                property {\n                    key\n                }\n            }\n        }\n    }\n}\n",
								"variables": "{\n    \"chessAppId\": \"{{chessAppId}}\",\n    \"personId\": \"{{m3JoeId}}\"\n}"
							}
						},
						"url": {
							"raw": "{{apiEndpoint}}",
							"host": [
								"{{apiEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Joe from Sococo",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query GetPersonById($sococoAppId: ID!, $personId: ID!) {\n  getPersonById(callingAppId: $sococoAppId, callingPersonId: $personId, targetPersonId: $personId) {\n        data {\n            __typename\n            ... on AppData {\n                app {\n                    name\n                }\n                data {\n                    key\n                    value\n                }\n            }\n            ... on OrgData {\n                org {\n                    name\n                }\n                data {\n                    key\n                    value\n                }\n            }\n        }\n        privacy {\n            public {\n                origin {\n                    __typename\n                    name\n                }\n                property {\n                    key\n                }\n            }\n        }\n        sharing {\n            permittedOrigin {\n                __typename\n                name\n            }\n            read {\n                property {\n                    key\n                }\n            }\n            write {\n                property {\n                    key\n                }\n            }\n        }\n    }\n}\n",
								"variables": "{\n    \"sococoAppId\": \"{{sococoAppId}}\",\n    \"personId\": \"{{m3JoeId}}\"\n}"
							}
						},
						"url": {
							"raw": "{{apiEndpoint}}",
							"host": [
								"{{apiEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Set Case 1",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation SetCase1($personId: ID!, $sococoAppId: ID!) {\n    updateAppPrivacy(input: {\n        callingAppId: $sococoAppId, \n        personId: $personId, \n        publicFields: []}) {\n    __typename\n    ... on ChangePersonPayload {\n      success\n    }\n    ... on Error {\n      errorMessage\n      errorCode\n    }\n  }\n  updateAppSharing(input: {\n        callingAppId: $sococoAppId, \n        personId: $personId, \n        sharing: []}) {\n    __typename\n    ... on ChangePersonPayload {\n        success\n    }\n    ... on Error {\n      errorMessage\n      errorCode\n    }\n  }\n}\n",
								"variables": "{\n    \"chessAppId\": \"{{chessAppId}}\",\n    \"personId\": \"{{m3JoeId}}\",\n    \"directoryServiceAppId\": \"{{directoryServiceAppId}}\",\n    \"sococoAppId\": \"{{sococoAppId}}\"\n}"
							}
						},
						"url": {
							"raw": "{{apiEndpoint}}",
							"host": [
								"{{apiEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Set Case 2",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation SetCase2($personId: ID!, $chessAppId: ID!, $sococoAppId: ID!) {\n    updateAppPrivacy(input: {\n        callingAppId: $sococoAppId, \n        personId: $personId, \n        publicFields: []}) {\n    __typename\n    ... on ChangePersonPayload {\n      success\n    }\n    ... on Error {\n      errorMessage\n      errorCode\n    }\n  }\n  updateAppSharing(input: {\n        callingAppId: $sococoAppId, \n        personId: $personId, \n        sharing: {\n            permittedAppId: $chessAppId, \n            read: [{appId: $sococoAppId, key: \"birthday\"}]\n            write: []\n        }\n    }) {\n    __typename\n    ... on ChangePersonPayload {\n      success\n    }\n    ... on Error {\n      errorMessage\n      errorCode\n    }\n  }\n}\n",
								"variables": "{\n    \"chessAppId\": \"{{chessAppId}}\",\n    \"personId\": \"{{m3JoeId}}\",\n    \"directoryServiceAppId\": \"{{directoryServiceAppId}}\",\n    \"sococoAppId\": \"{{sococoAppId}}\"\n}"
							}
						},
						"url": {
							"raw": "{{apiEndpoint}}",
							"host": [
								"{{apiEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Set Case 3",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation SetCase3($personId: ID!, $sococoAppId: ID!) {\n    updateAppPrivacy(input: {\n        callingAppId: $sococoAppId, \n        personId: $personId, \n        publicFields: []}) {\n    __typename\n    ... on ChangePersonPayload {\n      success\n    }\n    ... on Error {\n      errorMessage\n      errorCode\n    }\n  }\n  updateAppSharing(input: {\n        callingAppId: $sococoAppId, \n        personId: $personId, \n        sharing: {\n            permittedAppId: $sococoAppId, \n            read: [{appId: $sococoAppId, key: \"birthday\"}]\n            write: []\n        }\n    }) {\n    __typename\n    ... on ChangePersonPayload {\n      success\n    }\n    ... on Error {\n      errorMessage\n      errorCode\n    }\n  }\n}\n",
								"variables": "{\n    \"chessAppId\": \"{{chessAppId}}\",\n    \"personId\": \"{{m3JoeId}}\",\n    \"directoryServiceAppId\": \"{{directoryServiceAppId}}\",\n    \"sococoAppId\": \"{{sococoAppId}}\"\n}"
							}
						},
						"url": {
							"raw": "{{apiEndpoint}}",
							"host": [
								"{{apiEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Set Case 4",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation SetCase4($personId: ID!, $sococoAppId: ID!, $chessAppId: ID!) {\n    updateAppPrivacy(input: {\n        callingAppId: $sococoAppId, \n        personId: $personId, \n        publicFields: []}) {\n    __typename\n    ... on ChangePersonPayload {\n      success\n    }\n    ... on Error {\n      errorMessage\n      errorCode\n    }\n  }\n  updateAppSharing(input: {\n        callingAppId: $sococoAppId, \n        personId: $personId, \n        sharing: [{\n            permittedAppId: $sococoAppId, \n            read: [{appId: $sococoAppId, key: \"birthday\"}]\n            write: []\n        },{\n            permittedAppId: $chessAppId, \n            read: [{appId: $sococoAppId, key: \"birthday\"}]\n            write: []\n        }]\n    }) {\n    __typename\n    ... on ChangePersonPayload {\n      success\n    }\n    ... on Error {\n      errorMessage\n      errorCode\n    }\n  }\n}\n",
								"variables": "{\n    \"chessAppId\": \"{{chessAppId}}\",\n    \"personId\": \"{{m3JoeId}}\",\n    \"directoryServiceAppId\": \"{{directoryServiceAppId}}\",\n    \"sococoAppId\": \"{{sococoAppId}}\"\n}"
							}
						},
						"url": {
							"raw": "{{apiEndpoint}}",
							"host": [
								"{{apiEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Set Case 5",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation SetCase5($personId: ID!, $sococoAppId: ID!) {\n    updateAppPrivacy(input: {\n        callingAppId: $sococoAppId, \n        personId: $personId, \n        publicFields: [{\n            appId: $sococoAppId,\n            key: \"birthday\"\n        }]}) {\n    __typename\n    ... on ChangePersonPayload {\n      success\n    }\n    ... on Error {\n      errorMessage\n      errorCode\n    }\n  }\n  updateAppSharing(input: {\n        callingAppId: $sococoAppId, \n        personId: $personId, \n        sharing: []}) {\n    __typename\n    ... on ChangePersonPayload {\n        success\n    }\n    ... on Error {\n      errorMessage\n      errorCode\n    }\n  }\n}\n",
								"variables": "{\n    \"chessAppId\": \"{{chessAppId}}\",\n    \"personId\": \"{{m3JoeId}}\",\n    \"directoryServiceAppId\": \"{{directoryServiceAppId}}\",\n    \"sococoAppId\": \"{{sococoAppId}}\"\n}"
							}
						},
						"url": {
							"raw": "{{apiEndpoint}}",
							"host": [
								"{{apiEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Set Case 6",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation SetCase6($personId: ID!, $chessAppId: ID!, $sococoAppId: ID!) {\n    updateAppPrivacy(input: {\n        callingAppId: $sococoAppId, \n        personId: $personId, \n        publicFields: [{\n            appId: $sococoAppId,\n            key: \"birthday\"\n        }]}) {\n    __typename\n    ... on ChangePersonPayload {\n      success\n    }\n    ... on Error {\n      errorMessage\n      errorCode\n    }\n  }\n  updateAppSharing(input: {\n        callingAppId: $sococoAppId, \n        personId: $personId, \n        sharing: {\n            permittedAppId: $chessAppId, \n            read: [{appId: $sococoAppId, key: \"birthday\"}]\n            write: []\n        }\n    }) {\n    __typename\n    ... on ChangePersonPayload {\n      success\n    }\n    ... on Error {\n      errorMessage\n      errorCode\n    }\n  }\n}\n",
								"variables": "{\n    \"chessAppId\": \"{{chessAppId}}\",\n    \"personId\": \"{{m3JoeId}}\",\n    \"directoryServiceAppId\": \"{{directoryServiceAppId}}\",\n    \"sococoAppId\": \"{{sococoAppId}}\"\n}"
							}
						},
						"url": {
							"raw": "{{apiEndpoint}}",
							"host": [
								"{{apiEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Set Case 7",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation SetCase7($personId: ID!, $sococoAppId: ID!) {\n    updateAppPrivacy(input: {\n        callingAppId: $sococoAppId, \n        personId: $personId, \n        publicFields: [{\n            appId: $sococoAppId,\n            key: \"birthday\"\n        }]}) {\n    __typename\n    ... on ChangePersonPayload {\n      success\n    }\n    ... on Error {\n      errorMessage\n      errorCode\n    }\n  }\n  updateAppSharing(input: {\n        callingAppId: $sococoAppId, \n        personId: $personId, \n        sharing: {\n            permittedAppId: $sococoAppId, \n            read: [{appId: $sococoAppId, key: \"birthday\"}]\n            write: []\n        }\n    }) {\n    __typename\n    ... on ChangePersonPayload {\n      success\n    }\n    ... on Error {\n      errorMessage\n      errorCode\n    }\n  }\n}\n",
								"variables": "{\n    \"chessAppId\": \"{{chessAppId}}\",\n    \"personId\": \"{{m3JoeId}}\",\n    \"directoryServiceAppId\": \"{{directoryServiceAppId}}\",\n    \"sococoAppId\": \"{{sococoAppId}}\"\n}"
							}
						},
						"url": {
							"raw": "{{apiEndpoint}}",
							"host": [
								"{{apiEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Set Case 8",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation SetCase8($personId: ID!, $sococoAppId: ID!, $chessAppId: ID!) {\n    updateAppPrivacy(input: {\n        callingAppId: $sococoAppId, \n        personId: $personId, \n        publicFields: [{\n            appId: $sococoAppId,\n            key: \"birthday\"\n        }]}) {\n    __typename\n    ... on ChangePersonPayload {\n      success\n    }\n    ... on Error {\n      errorMessage\n      errorCode\n    }\n  }\n  updateAppSharing(input: {\n        callingAppId: $sococoAppId, \n        personId: $personId, \n        sharing: [{\n            permittedAppId: $sococoAppId, \n            read: [{appId: $sococoAppId, key: \"birthday\"}]\n            write: []\n        },{\n            permittedAppId: $chessAppId, \n            read: [{appId: $sococoAppId, key: \"birthday\"}]\n            write: []\n        }]\n    }) {\n    __typename\n    ... on ChangePersonPayload {\n      success\n    }\n    ... on Error {\n      errorMessage\n      errorCode\n    }\n  }\n}\n",
								"variables": "{\n    \"chessAppId\": \"{{chessAppId}}\",\n    \"personId\": \"{{m3JoeId}}\",\n    \"directoryServiceAppId\": \"{{directoryServiceAppId}}\",\n    \"sococoAppId\": \"{{sococoAppId}}\"\n}"
							}
						},
						"url": {
							"raw": "{{apiEndpoint}}",
							"host": [
								"{{apiEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Write from Chess",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation UpdateAppData($chessAppId: ID!, $sococoAppId: ID!, $appData: AWSJSON!, $personId: ID!) {\n  updateAppData(input: {\n      appData: $appData, \n      callingAppId: $chessAppId, \n      targetAppId: $sococoAppId, \n      personId: $personId}) {\n    __typename\n    ... on ChangeAppDataPayload {\n      success\n    }\n    ... on InvalidAppData {\n      errorMessage\n      errorCode\n    }\n    ... on AppNotFound {\n      errorMessage\n      errorCode\n    }\n    ... on PersonNotFound {\n      errorMessage\n      errorCode\n    }\n  }\n}\n",
								"variables": "{\n    \"chessAppId\": \"{{chessAppId}}\",\n    \"personId\": \"{{m3JoeId}}\",\n    \"directoryServiceAppId\": \"{{directoryServiceAppId}}\",\n    \"sococoAppId\": \"{{sococoAppId}}\",\n    \"appData\": \"{ \\\"birthday\\\": \\\"04/12/2000\\\"}\"\n}"
							}
						},
						"url": {
							"raw": "{{apiEndpoint}}",
							"host": [
								"{{apiEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Write from Sococo",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation UpdateAppData($sococoAppId: ID!, $appData: AWSJSON!, $personId: ID!) {\n  updateAppData(input: {\n      appData: $appData, \n      callingAppId: $sococoAppId, \n      targetAppId: $sococoAppId, \n      personId: $personId}) {\n    __typename\n    ... on ChangeAppDataPayload {\n      success\n    }\n    ... on InvalidAppData {\n      errorMessage\n      errorCode\n    }\n    ... on AppNotFound {\n      errorMessage\n      errorCode\n    }\n    ... on PersonNotFound {\n      errorMessage\n      errorCode\n    }\n  }\n}\n",
								"variables": "{\n    \"chessAppId\": \"{{chessAppId}}\",\n    \"personId\": \"{{m3JoeId}}\",\n    \"directoryServiceAppId\": \"{{directoryServiceAppId}}\",\n    \"sococoAppId\": \"{{sococoAppId}}\",\n    \"appData\": \"{ \\\"birthday\\\": \\\"04/12/2012\\\", \\\"title\\\": \\\"Blogger\\\" }\"\n}"
							}
						},
						"url": {
							"raw": "{{apiEndpoint}}",
							"host": [
								"{{apiEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Set Case 9",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation SetCase9($personId: ID!, $sococoAppId: ID!) {\n    updateAppPrivacy(input: {\n        callingAppId: $sococoAppId, \n        personId: $personId, \n        publicFields: [{\n            appId: $sococoAppId,\n            key: \"birthday\"\n        }]}) {\n    __typename\n    ... on ChangePersonPayload {\n      success\n    }\n    ... on Error {\n      errorMessage\n      errorCode\n    }\n  }\n  updateAppSharing(input: {\n        callingAppId: $sococoAppId, \n        personId: $personId, \n        sharing: []}) {\n    __typename\n    ... on ChangePersonPayload {\n        success\n    }\n    ... on Error {\n      errorMessage\n      errorCode\n    }\n  }\n}\n",
								"variables": "{\n    \"chessAppId\": \"{{chessAppId}}\",\n    \"personId\": \"{{m3JoeId}}\",\n    \"directoryServiceAppId\": \"{{directoryServiceAppId}}\",\n    \"sococoAppId\": \"{{sococoAppId}}\"\n}"
							}
						},
						"url": {
							"raw": "{{apiEndpoint}}",
							"host": [
								"{{apiEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Set Case 10",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation SetCase9($personId: ID!, $sococoAppId: ID!, $chessAppId: ID!) {\n    updateAppPrivacy(input: {\n        callingAppId: $sococoAppId, \n        personId: $personId, \n        publicFields: [{\n            appId: $sococoAppId,\n            key: \"birthday\"\n        }]}) {\n    __typename\n    ... on ChangePersonPayload {\n      success\n    }\n    ... on Error {\n      errorMessage\n      errorCode\n    }\n  }\n  updateAppSharing(input: {\n        callingAppId: $sococoAppId, \n        personId: $personId, \n        sharing: [{\n            permittedAppId: $chessAppId,\n            read: {\n                appId: $sococoAppId,\n                key: \"birthday\"\n            },\n            write: {\n                appId: $sococoAppId,\n                key: \"birthday\"\n            }\n        }]}) {\n    __typename\n    ... on ChangePersonPayload {\n        success\n    }\n    ... on Error {\n      errorMessage\n      errorCode\n    }\n  }\n}\n",
								"variables": "{\n    \"chessAppId\": \"{{chessAppId}}\",\n    \"personId\": \"{{m3JoeId}}\",\n    \"directoryServiceAppId\": \"{{directoryServiceAppId}}\",\n    \"sococoAppId\": \"{{sococoAppId}}\"\n}"
							}
						},
						"url": {
							"raw": "{{apiEndpoint}}",
							"host": [
								"{{apiEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Set Case 11",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation SetCase9($personId: ID!, $sococoAppId: ID!) {\n    updateAppPrivacy(input: {\n        callingAppId: $sococoAppId, \n        personId: $personId, \n        publicFields: [{\n            appId: $sococoAppId,\n            key: \"birthday\"\n        }]}) {\n    __typename\n    ... on ChangePersonPayload {\n      success\n    }\n    ... on Error {\n      errorMessage\n      errorCode\n    }\n  }\n  updateAppSharing(input: {\n        callingAppId: $sococoAppId, \n        personId: $personId, \n        sharing: [{\n            permittedAppId: $sococoAppId,\n            read: {\n                appId: $sococoAppId,\n                key: \"birthday\"\n            },\n            write: {\n                appId: $sococoAppId,\n                key: \"birthday\"\n            }\n        }]}) {\n    __typename\n    ... on ChangePersonPayload {\n        success\n    }\n    ... on Error {\n      errorMessage\n      errorCode\n    }\n  }\n}\n",
								"variables": "{\n    \"chessAppId\": \"{{chessAppId}}\",\n    \"personId\": \"{{m3JoeId}}\",\n    \"directoryServiceAppId\": \"{{directoryServiceAppId}}\",\n    \"sococoAppId\": \"{{sococoAppId}}\"\n}"
							}
						},
						"url": {
							"raw": "{{apiEndpoint}}",
							"host": [
								"{{apiEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Set Case 12",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation SetCase9($personId: ID!, $sococoAppId: ID!, $chessAppId: ID!) {\n    updateAppPrivacy(input: {\n        callingAppId: $sococoAppId, \n        personId: $personId, \n        publicFields: [{\n            appId: $sococoAppId,\n            key: \"birthday\"\n        }]}) {\n    __typename\n    ... on ChangePersonPayload {\n      success\n    }\n    ... on Error {\n      errorMessage\n      errorCode\n    }\n  }\n  updateAppSharing(input: {\n        callingAppId: $sococoAppId, \n        personId: $personId, \n        sharing: [{\n            permittedAppId: $sococoAppId,\n            read: {\n                appId: $sococoAppId,\n                key: \"birthday\"\n            },\n            write: [{\n                appId: $sococoAppId,\n                key: \"birthday\"\n            }]\n        },{\n            permittedAppId: $chessAppId,\n            read: {\n                appId: $sococoAppId,\n                key: \"birthday\"\n            },\n            write: [{\n                appId: $sococoAppId,\n                key: \"birthday\"\n            }]\n        }]}) {\n    __typename\n    ... on ChangePersonPayload {\n        success\n    }\n    ... on Error {\n      errorMessage\n      errorCode\n    }\n  }\n}\n",
								"variables": "{\n    \"chessAppId\": \"{{chessAppId}}\",\n    \"personId\": \"{{m3JoeId}}\",\n    \"directoryServiceAppId\": \"{{directoryServiceAppId}}\",\n    \"sococoAppId\": \"{{sococoAppId}}\"\n}"
							}
						},
						"url": {
							"raw": "{{apiEndpoint}}",
							"host": [
								"{{apiEndpoint}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "M3 - Privacy controls - Org",
			"item": [
				{
					"name": "Setup",
					"item": [
						{
							"name": "1. Create Sococo App",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation CreateSococoApp($appName: String!, $appMetadata: AWSJSON!) {\n    createApp(input: {callingAppId: \"{{directoryServiceAppId}}\", metadata: $appMetadata, name: $appName}) {\n    ... on ChangeAppPayload {\n      __typename\n      success\n      app {\n        id\n        metadata {\n          suggestible\n          searchable\n          schema\n          required\n          properties {\n            format\n            key\n            type\n          }\n        }\n        name\n      }\n    }\n    ... on InvalidAppConfig {\n      errorMessage\n      errorCode\n    }\n    ... on AppNotFound {\n      errorMessage\n      errorCode\n    }\n  }\n}\n",
										"variables": "{\n    \"appName\": \"Sococo\",\n    \"appMetadata\": \"{{sococoAppConfig}}\"\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. Create AnOrg",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation CreateOrg ($input: CreateOrgInput!) {\n  createOrg (input: $input) {\n  __typename\n  ...on ChangeOrgPayload {\n    success\n    org {\n      id name\n      metadata {\n        schema searchable suggestible required\n        properties {\n          key format type\n        }\n      }\n    }\n  }\n  ...on Error { errorCode errorMessage }\n}\n}",
										"variables": "{\n    \"input\": {\n            \"callingAppId\": \"{{directoryServiceAppId}}\",\n            \"name\": \"AnOrg\",\n            \"metadata\": \"{\\r\\n  \\\"$schema\\\": \\\"https:\\/\\/schemas.sococo5k.com\\/app-schema-01.json\\\",\\r\\n  \\\"properties\\\": {\\r\\n    \\\"organization email\\\": {\\r\\n      \\\"type\\\": \\\"string\\\",\\r\\n      \\\"format\\\": \\\"email\\\"\\r\\n    },\\r\\n    \\\"role\\\": {\\r\\n      \\\"type\\\": \\\"string\\\"\\r\\n    }\\r\\n  },\\r\\n  \\\"searchable\\\": [\\\"organization email\\\",\\\"role\\\"],\\r\\n  \\\"suggestible\\\": [\\\"role\\\"],\\r\\n  \\\"required\\\": [\\\"role\\\"]\\r\\n}\\r\\n\"\n          }\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "3. Create OtherOrg",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation CreateOrg ($input: CreateOrgInput!) {\n  createOrg (input: $input) {\n  __typename\n  ...on ChangeOrgPayload {\n    success\n    org {\n      id name\n      metadata {\n        schema searchable suggestible required\n        properties {\n          key format type\n        }\n      }\n    }\n  }\n  ...on Error { errorCode errorMessage }\n}\n}",
										"variables": "{\n    \"input\": {\n            \"callingAppId\": \"{{directoryServiceAppId}}\",\n            \"name\": \"OtherOrg\",\n            \"metadata\": \"{\\r\\n  \\\"$schema\\\": \\\"https:\\/\\/schemas.sococo5k.com\\/app-schema-01.json\\\",\\r\\n  \\\"properties\\\": {\\r\\n    \\\"organization phone\\\": {\\r\\n      \\\"type\\\": \\\"string\\\"    },\\r\\n    \\\"class\\\": {\\r\\n      \\\"type\\\": \\\"string\\\"\\r\\n    }\\r\\n  },\\r\\n  \\\"searchable\\\": [\\\"organization phone\\\",\\\"class\\\"],\\r\\n  \\\"suggestible\\\": [\\\"class\\\"],\\r\\n  \\\"required\\\": [\\\"class\\\"]\\r\\n}\\r\\n\"\n          }\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "4. Add AnOrg to Sococo App",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation AddOrgToApp ($input: AddOrgToAppInput!) {\n  addOrgToApp (input: $input) {\n  __typename\n  ...on ChangeHierarchyPayload {\n    success\n  }\n  ...on Error { errorCode errorMessage }\n}\n}",
										"variables": "{\n    \"input\": {\n            \"callingAppId\": \"{{sococoAppId}}\",\n            \"callingOrgId\": \"{{m3AnOrgId}}\"\n          }\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "5. Add OtherOrg to Sococo App",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation AddOrgToApp ($input: AddOrgToAppInput!) {\n  addOrgToApp (input: $input) {\n  __typename\n  ...on ChangeHierarchyPayload {\n    success\n  }\n  ...on Error { errorCode errorMessage }\n}\n}",
										"variables": "{\n    \"input\": {\n            \"callingAppId\": \"{{sococoAppId}}\",\n            \"callingOrgId\": \"{{m3OtherOrgId}}\"\n          }\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "6. Create Joe Bloggs",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation CreatePerson($sococoAppId: ID!, $appData: AWSJSON, $familyName: String!, $givenName: String!, $primaryEmail: AWSEmail!) {\n  createPerson(input: {appData: $appData, callingAppId: $sococoAppId, familyName: $familyName, givenName: $givenName, primaryEmail: $primaryEmail}) {\n    __typename\n    ... on ChangePersonPayload {\n      person { id data {\n    ... on AppData {\n      __typename\n      app {\n        id\n        metadata {\n          properties {\n            format\n            key\n            type\n          }\n          required\n          schema\n          searchable\n          suggestible\n        }\n        name\n      }\n      data {\n        key value\n      }\n    }\n    ... on OrgData {\n      __typename\n      org {\n        id\n        metadata {\n          properties {\n            format\n            key\n            type\n          }\n          required\n          schema\n          searchable\n          suggestible\n        }\n        name\n      }\n      data {\n        key value\n      }\n    }\n  }\n  privacy {\n    public {\n      origin {\n        __typename\n        id\n        metadata {\n          properties {\n            format\n            key\n            type\n          }\n          required\n          schema\n          searchable\n          suggestible\n        }\n        name\n      }\n      property { key type format }\n    }\n  }\n  sharing {\n    permittedOrigin {\n      __typename\n      id\n      metadata {\n        properties {\n          format\n          key\n          type\n        }\n        required\n        schema\n        searchable\n        suggestible\n      }\n      name\n    }\n    read {\n      origin {\n        __typename\n        id\n        metadata {\n          properties {\n            format\n            key\n            type\n          }\n          required\n          schema\n          searchable\n          suggestible\n        }\n        name\n      }\n      property { key type format }\n    }\n    write {\n      origin {\n        __typename\n        id\n        metadata {\n          properties {\n            format\n            key\n            type\n          }\n          required\n          schema\n          searchable\n          suggestible\n        }\n        name\n      }\n      property { key type format }\n    }\n  }}\n      success\n    }\n    ... on Error {\n      errorMessage\n      errorCode\n    }\n  }\n}\n",
										"variables": "{\n    \"familyName\": \"Bloggs\",\n    \"givenName\": \"Joe\",\n    \"primaryEmail\": \"joe@gmail.com\",\n    \"appData\": \"{  \\\"title\\\": \\\"Blogger\\\",  \\\"birthday\\\": \\\"04/21/1959\\\"}\",\n    \"sococoAppId\": \"{{sococoAppId}}\"\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "7. Create Jane Bliggs",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation CreatePerson($sococoAppId: ID!, $appData: AWSJSON, $familyName: String!, $givenName: String!, $primaryEmail: AWSEmail!) {\n  createPerson(input: {appData: $appData, callingAppId: $sococoAppId, familyName: $familyName, givenName: $givenName, primaryEmail: $primaryEmail}) {\n    __typename\n    ... on ChangePersonPayload {\n      person { id data {\n    ... on AppData {\n      __typename\n      app {\n        id\n        metadata {\n          properties {\n            format\n            key\n            type\n          }\n          required\n          schema\n          searchable\n          suggestible\n        }\n        name\n      }\n      data {\n        key value\n      }\n    }\n    ... on OrgData {\n      __typename\n      org {\n        id\n        metadata {\n          properties {\n            format\n            key\n            type\n          }\n          required\n          schema\n          searchable\n          suggestible\n        }\n        name\n      }\n      data {\n        key value\n      }\n    }\n  }\n  privacy {\n    public {\n      origin {\n        __typename\n        id\n        metadata {\n          properties {\n            format\n            key\n            type\n          }\n          required\n          schema\n          searchable\n          suggestible\n        }\n        name\n      }\n      property { key type format }\n    }\n  }\n  sharing {\n    permittedOrigin {\n      __typename\n      id\n      metadata {\n        properties {\n          format\n          key\n          type\n        }\n        required\n        schema\n        searchable\n        suggestible\n      }\n      name\n    }\n    read {\n      origin {\n        __typename\n        id\n        metadata {\n          properties {\n            format\n            key\n            type\n          }\n          required\n          schema\n          searchable\n          suggestible\n        }\n        name\n      }\n      property { key type format }\n    }\n    write {\n      origin {\n        __typename\n        id\n        metadata {\n          properties {\n            format\n            key\n            type\n          }\n          required\n          schema\n          searchable\n          suggestible\n        }\n        name\n      }\n      property { key type format }\n    }\n  }}\n      success\n    }\n    ... on Error {\n      errorMessage\n      errorCode\n    }\n  }\n}\n",
										"variables": "{\n    \"familyName\": \"Bliggs\",\n    \"givenName\": \"Jane\",\n    \"primaryEmail\": \"jane@gmail.com\",\n    \"appData\": \"{  \\\"title\\\": \\\"Bligger\\\",  \\\"birthday\\\": \\\"05/21/1959\\\"}\",\n    \"sococoAppId\": \"{{sococoAppId}}\"\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "8. Create Jude Bluiggs",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation CreatePerson($sococoAppId: ID!, $appData: AWSJSON, $familyName: String!, $givenName: String!, $primaryEmail: AWSEmail!) {\n  createPerson(input: {appData: $appData, callingAppId: $sococoAppId, familyName: $familyName, givenName: $givenName, primaryEmail: $primaryEmail}) {\n    __typename\n    ... on ChangePersonPayload {\n      person { id data {\n    ... on AppData {\n      __typename\n      app {\n        id\n        metadata {\n          properties {\n            format\n            key\n            type\n          }\n          required\n          schema\n          searchable\n          suggestible\n        }\n        name\n      }\n      data {\n        key value\n      }\n    }\n    ... on OrgData {\n      __typename\n      org {\n        id\n        metadata {\n          properties {\n            format\n            key\n            type\n          }\n          required\n          schema\n          searchable\n          suggestible\n        }\n        name\n      }\n      data {\n        key value\n      }\n    }\n  }\n  privacy {\n    public {\n      origin {\n        __typename\n        id\n        metadata {\n          properties {\n            format\n            key\n            type\n          }\n          required\n          schema\n          searchable\n          suggestible\n        }\n        name\n      }\n      property { key type format }\n    }\n  }\n  sharing {\n    permittedOrigin {\n      __typename\n      id\n      metadata {\n        properties {\n          format\n          key\n          type\n        }\n        required\n        schema\n        searchable\n        suggestible\n      }\n      name\n    }\n    read {\n      origin {\n        __typename\n        id\n        metadata {\n          properties {\n            format\n            key\n            type\n          }\n          required\n          schema\n          searchable\n          suggestible\n        }\n        name\n      }\n      property { key type format }\n    }\n    write {\n      origin {\n        __typename\n        id\n        metadata {\n          properties {\n            format\n            key\n            type\n          }\n          required\n          schema\n          searchable\n          suggestible\n        }\n        name\n      }\n      property { key type format }\n    }\n  }}\n      success\n    }\n    ... on Error {\n      errorMessage\n      errorCode\n    }\n  }\n}\n",
										"variables": "{\n    \"familyName\": \"Bluggs\",\n    \"givenName\": \"Jude\",\n    \"primaryEmail\": \"jude@gmail.com\",\n    \"appData\": \"{  \\\"title\\\": \\\"Blugger\\\",  \\\"birthday\\\": \\\"06/21/1959\\\"}\",\n    \"sococoAppId\": \"{{sococoAppId}}\"\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "9. Add Joe Bloggs to AnOrg",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation CreateOrgData ($input: CreateOrgDataInput!) {\n  createOrgData (input: $input) {\n  __typename\n  ...on ChangeOrgDataPayload {\n    success\n  }\n  ...on Error { errorCode errorMessage }\n}\n}",
										"variables": "{\n    \"input\": {\n            \"callingAppId\": \"{{sococoAppId}}\",\n            \"personId\": \"{{m3OrgJoeId}}\",\n            \"callingOrgId\": \"{{m3AnOrgId}}\",\n            \"orgData\": \"{\\r\\n  \\\"role\\\": \\\"Dynamic Branding Analyst\\\",\\r\\n  \\\"organization email\\\": \\\"the-dynamic@example.com\\\"\\r\\n}\\r\\n\"\n          }\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "10. Add Joe Bloggs to OtherOrg",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation CreateOrgData ($input: CreateOrgDataInput!) {\n  createOrgData (input: $input) {\n  __typename\n  ...on ChangeOrgDataPayload {\n    success\n  }\n  ...on Error { errorCode errorMessage }\n}\n}",
										"variables": "{\n    \"input\": {\n            \"callingAppId\": \"{{sococoAppId}}\",\n            \"personId\": \"{{m3OrgJoeId}}\",\n            \"callingOrgId\": \"{{m3OtherOrgId}}\",\n            \"orgData\": \"{\\r\\n  \\\"class\\\": \\\"Class D\\\",\\r\\n  \\\"organization phone\\\": \\\"(555) 123-4567\\\"\\r\\n}\\r\\n\"\n          }\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "11. Add Jane Bligs to OtherOrg",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation CreateOrgData ($input: CreateOrgDataInput!) {\n  createOrgData (input: $input) {\n  __typename\n  ...on ChangeOrgDataPayload {\n    success\n  }\n  ...on Error { errorCode errorMessage }\n}\n}",
										"variables": "{\n    \"input\": {\n            \"callingAppId\": \"{{sococoAppId}}\",\n            \"personId\": \"{{m3OrgJaneId}}\",\n            \"callingOrgId\": \"{{m3OtherOrgId}}\",\n            \"orgData\": \"{\\r\\n  \\\"class\\\": \\\"Class D\\\",\\r\\n  \\\"organization phone\\\": \\\"(555) 123-4567\\\"\\r\\n}\\r\\n\"\n          }\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "12. Add Jude Bluggs to AnOrg Copy",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation CreateOrgData ($input: CreateOrgDataInput!) {\n  createOrgData (input: $input) {\n  __typename\n  ...on ChangeOrgDataPayload {\n    success\n  }\n  ...on Error { errorCode errorMessage }\n}\n}",
										"variables": "{\n    \"input\": {\n            \"callingAppId\": \"{{sococoAppId}}\",\n            \"personId\": \"{{m3OrgJudeId}}\",\n            \"callingOrgId\": \"{{m3AnOrgId}}\",\n            \"orgData\": \"{\\r\\n  \\\"role\\\": \\\"Dynamic Branding Analyst\\\",\\r\\n  \\\"organization email\\\": \\\"the-dynamic@example.com\\\"\\r\\n}\\r\\n\"\n          }\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get Joe self-view From App",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query GetPersonById($callingAppId: ID!, $personId: ID!) {\n  getPersonById(callingAppId: $callingAppId, callingPersonId: $personId, targetPersonId: $personId) {\n        id\n        data {\n            __typename\n            ... on AppData {\n                app {\n                    id\n                    name\n                }\n                data {\n                    key\n                    value\n                }\n            }\n            ... on OrgData {\n                org {\n                    id\n                    name\n                }\n                data {\n                    key\n                    value\n                }\n            }\n        }\n    }\n}",
								"variables": "{\n    \"callingAppId\": \"{{sococoAppId}}\",\n    \"personId\": \"{{m3OrgJoeId}}\"\n}"
							}
						},
						"url": {
							"raw": "{{apiEndpoint}}",
							"host": [
								"{{apiEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Joe self-view from AnOrg",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query GetPersonById($callingAppId: ID!, $personId: ID!, $callingOrgId: ID!) {\n  getPersonById(callingAppId: $callingAppId, callingPersonId: $personId, targetPersonId: $personId, callingOrgId: $callingOrgId) {\n        id\n        data {\n            __typename\n            ... on AppData {\n                app {\n                    id\n                    name\n                }\n                data {\n                    key\n                    value\n                }\n            }\n            ... on OrgData {\n                org {\n                    id\n                    name\n                }\n                data {\n                    key\n                    value\n                }\n            }\n        }\n    }\n}",
								"variables": "{\n    \"callingAppId\": \"{{sococoAppId}}\",\n    \"personId\": \"{{m3OrgJoeId}}\",\n    \"callingOrgId\": \"{{m3AnOrgId}}\"\n}"
							}
						},
						"url": {
							"raw": "{{apiEndpoint}}",
							"host": [
								"{{apiEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Joe self-view from OtherOrg",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query GetPersonById($callingAppId: ID!, $personId: ID!, $callingOrgId: ID!) {\n  getPersonById(callingAppId: $callingAppId, callingPersonId: $personId, targetPersonId: $personId, callingOrgId: $callingOrgId) {\n        id\n        data {\n            __typename\n            ... on AppData {\n                app {\n                    id\n                    name\n                }\n                data {\n                    key\n                    value\n                }\n            }\n            ... on OrgData {\n                org {\n                    id\n                    name\n                }\n                data {\n                    key\n                    value\n                }\n            }\n        }\n    }\n}",
								"variables": "{\n    \"callingAppId\": \"{{sococoAppId}}\",\n    \"personId\": \"{{m3OrgJoeId}}\",\n    \"callingOrgId\": \"{{m3OtherOrgId}}\"\n}"
							}
						},
						"url": {
							"raw": "{{apiEndpoint}}",
							"host": [
								"{{apiEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Joe from AnOrg",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query GetPersonById($callingAppId: ID!, $callingOrgId: ID!, $callingPersonId: ID!, $targetPersonId: ID!) {\n    getPersonById(\n        callingAppId: $callingAppId, \n        callingOrgId: $callingOrgId,\n        callingPersonId: $callingPersonId, \n        targetPersonId: $targetPersonId) {\n            id\n            data {\n                __typename\n                ... on AppData {\n                    app {\n                        name\n                    }\n                    data {\n                        key\n                        value\n                    }\n                }\n                ... on OrgData {\n                    org {\n                        name\n                    }\n                    data {\n                        key\n                        value\n                    }\n                }\n            }\n            privacy {\n                public {\n                    origin {\n                        __typename\n                        name\n                    }\n                    property {\n                        key\n                    }\n                }\n            }\n            sharing {\n                permittedOrigin {\n                    __typename\n                    name\n                }\n                read {\n                    property {\n                        key\n                    }\n                }\n                write {\n                    property {\n                        key\n                    }\n                }\n            }\n        }\n}\n",
								"variables": "{\n    \"callingAppId\": \"{{sococoAppId}}\",\n    \"callingOrgId\": \"{{m3AnOrgId}}\",\n    \"targetPersonId\": \"{{m3OrgJoeId}}\",\n    \"callingPersonId\": \"{{m3OrgJaneId}}\"\n}"
							}
						},
						"url": {
							"raw": "{{apiEndpoint}}",
							"host": [
								"{{apiEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Joe from OtherOrg",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query GetPersonById($callingAppId: ID!, $callingOrgId: ID!, $callingPersonId: ID!, $targetPersonId: ID!) {\n    getPersonById(\n        callingAppId: $callingAppId, \n        callingOrgId: $callingOrgId,\n        callingPersonId: $callingPersonId, \n        targetPersonId: $targetPersonId) {\n            id\n            data {\n                __typename\n                ... on AppData {\n                    app {\n                        name\n                    }\n                    data {\n                        key\n                        value\n                    }\n                }\n                ... on OrgData {\n                    org {\n                        name\n                    }\n                    data {\n                        key\n                        value\n                    }\n                }\n            }\n            privacy {\n                public {\n                    origin {\n                        __typename\n                        name\n                    }\n                    property {\n                        key\n                    }\n                }\n            }\n            sharing {\n                permittedOrigin {\n                    __typename\n                    name\n                }\n                read {\n                    property {\n                        key\n                    }\n                }\n                write {\n                    property {\n                        key\n                    }\n                }\n            }\n        }\n}\n",
								"variables": "{\n    \"callingAppId\": \"{{sococoAppId}}\",\n    \"callingOrgId\": \"{{m3OtherOrgId}}\",\n    \"targetPersonId\": \"{{m3OrgJoeId}}\",\n    \"callingPersonId\": \"{{m3OrgJudeId}}\"\n}"
							}
						},
						"url": {
							"raw": "{{apiEndpoint}}",
							"host": [
								"{{apiEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Set Case 1 - No public fields",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation SetCase1($personId: ID!, $callingAppId: ID!, $callingOrgId: ID!) {\n    updateOrgPrivacy(input: {\n        callingAppId: $callingAppId, \n        callingOrgId: $callingOrgId, \n        personId: $personId, \n        publicFields: []\n        }) {\n    __typename\n    ... on ChangePersonPayload {\n      success\n    }\n    ... on Error {\n      errorMessage\n      errorCode\n    }\n  }\n  updateOrgSharing(input: {\n        callingAppId: $callingAppId, \n        callingOrgId: $callingOrgId, \n        personId: $personId, \n        sharing: []}) {\n    __typename\n    ... on ChangePersonPayload {\n        success\n    }\n    ... on Error {\n      errorMessage\n      errorCode\n    }\n  }\n}\n",
								"variables": "{\n    \"callingAppId\": \"{{sococoAppId}}\",\n    \"callingOrgId\": \"{{m3AnOrgId}}\",\n    \"personId\": \"{{m3OrgJoeId}}\",\n    \"directoryServiceAppId\": \"{{directoryServiceAppId}}\"\n}"
							}
						},
						"url": {
							"raw": "{{apiEndpoint}}",
							"host": [
								"{{apiEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Set Case 2 - Share Role with OtherOrg",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation SetCase2($personId: ID!, $callingAppId: ID!, $allowedToCalltOrgId: ID!, $callingOrgId: ID!) {\n    updateOrgPrivacy(input: {\n        callingAppId: $callingAppId, \n        callingOrgId: $callingOrgId,\n        personId: $personId, \n        publicFields: []}) {\n    __typename\n    ... on ChangePersonPayload {\n      success\n    }\n    ... on Error {\n      errorMessage\n      errorCode\n    }\n  }\n  updateOrgSharing(input: {\n        callingAppId: $callingAppId, \n        callingOrgId: $callingOrgId,\n        personId: $personId, \n        sharing: {\n            permittedOrgId: $allowedToCalltOrgId, \n            read: [{orgId: $callingOrgId, key: \"role\"}]\n            write: []\n        }\n    }) {\n    __typename\n    ... on ChangePersonPayload {\n      success\n    }\n    ... on Error {\n      errorMessage\n      errorCode\n    }\n  }\n}\n",
								"variables": "{\n    \"callingAppId\": \"{{sococoAppId}}\",\n    \"personId\": \"{{m3OrgJoeId}}\",\n    \"allowedToCalltOrgId\": \"{{m3OtherOrgId}}\",\n    \"callingOrgId\": \"{{m3AnOrgId}}\"\n}"
							}
						},
						"url": {
							"raw": "{{apiEndpoint}}",
							"host": [
								"{{apiEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Set Case 3 - Share Role with AnOrg",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation SetCase3($personId: ID!, $callingAppId: ID!, $allowedToCalltOrgId: ID!, $callingOrgId: ID!) {\n    updateOrgPrivacy(input: {\n        callingAppId: $callingAppId, \n        callingOrgId: $callingOrgId,\n        personId: $personId, \n        publicFields: []}) {\n    __typename\n    ... on ChangePersonPayload {\n      success\n    }\n    ... on Error {\n      errorMessage\n      errorCode\n    }\n  }\n  updateOrgSharing(input: {\n        callingAppId: $callingAppId, \n        callingOrgId: $callingOrgId,\n        personId: $personId, \n        sharing: {\n            permittedOrgId: $allowedToCalltOrgId, \n            read: [{orgId: $callingOrgId, key: \"role\"}]\n            write: []\n        }\n    }) {\n    __typename\n    ... on ChangePersonPayload {\n      success\n    }\n    ... on Error {\n      errorMessage\n      errorCode\n    }\n  }\n}\n",
								"variables": "{\n    \"callingAppId\": \"{{sococoAppId}}\",\n    \"personId\": \"{{m3OrgJoeId}}\",\n    \"allowedToCalltOrgId\": \"{{m3AnOrgId}}\",\n    \"callingOrgId\": \"{{m3AnOrgId}}\"\n}"
							}
						},
						"url": {
							"raw": "{{apiEndpoint}}",
							"host": [
								"{{apiEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Set Case 4 - Share Role with AnOrg and OtherOrg",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation SetCase4($personId: ID!, $callingAppId: ID!, $allowedToCalltOrgId: ID!, $callingOrgId: ID!) {\n    updateOrgPrivacy(input: {\n        callingAppId: $callingAppId, \n        callingOrgId: $callingOrgId,\n        personId: $personId, \n        publicFields: []}) {\n    __typename\n    ... on ChangePersonPayload {\n      success\n    }\n    ... on Error {\n      errorMessage\n      errorCode\n    }\n  }\n  updateOrgSharing(input: {\n        callingAppId: $callingAppId, \n        callingOrgId: $callingOrgId,\n        personId: $personId, \n        sharing: [{\n            permittedOrgId: $allowedToCalltOrgId, \n            read: [{orgId: $callingOrgId, key: \"role\"}]\n            write: []\n        },{\n            permittedOrgId: $callingOrgId, \n            read: [{orgId: $callingOrgId, key: \"role\"}]\n            write: []\n        }]\n    }) {\n    __typename\n    ... on ChangePersonPayload {\n      success\n    }\n    ... on Error {\n      errorMessage\n      errorCode\n    }\n  }\n}\n",
								"variables": "{\n    \"callingAppId\": \"{{sococoAppId}}\",\n    \"personId\": \"{{m3OrgJoeId}}\",\n    \"allowedToCalltOrgId\": \"{{m3OtherOrgId}}\",\n    \"callingOrgId\": \"{{m3AnOrgId}}\"\n}"
							}
						},
						"url": {
							"raw": "{{apiEndpoint}}",
							"host": [
								"{{apiEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Set Case 5 - Make role public",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation SetCase5($personId: ID!, $callingAppId: ID!, $callingOrgId: ID!) {\n    updateOrgPrivacy(input: {\n        callingAppId: $callingAppId, \n        callingOrgId: $callingOrgId, \n        personId: $personId, \n        publicFields: [{\n            orgId: $callingOrgId,\n            key: \"role\"\n        }]}) {\n    __typename\n    ... on ChangePersonPayload {\n      success\n    }\n    ... on Error {\n      errorMessage\n      errorCode\n    }\n  }\n  updateOrgSharing(input: {\n        callingAppId: $callingAppId,\n        callingOrgId: $callingOrgId,\n        personId: $personId, \n        sharing: []}) {\n    __typename\n    ... on ChangePersonPayload {\n        success\n    }\n    ... on Error {\n      errorMessage\n      errorCode\n    }\n  }\n}\n",
								"variables": "{\n    \"callingAppId\": \"{{sococoAppId}}\",\n    \"callingOrgId\": \"{{m3AnOrgId}}\",\n    \"personId\": \"{{m3OrgJoeId}}\",\n    \"directoryServiceAppId\": \"{{directoryServiceAppId}}\"\n}"
							}
						},
						"url": {
							"raw": "{{apiEndpoint}}",
							"host": [
								"{{apiEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Set Case 6 - Make role public & Share Role with OtherOrg",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation SetCase6($personId: ID!, $callingAppId: ID!, $allowedToCalltOrgId: ID!, $callingOrgId: ID!) {\n    updateOrgPrivacy(input: {\n        callingAppId: $callingAppId, \n        callingOrgId: $callingOrgId,\n        personId: $personId, \n        publicFields: [{\n            orgId: $callingOrgId,\n            key: \"role\"\n        }]}) {\n    __typename\n    ... on ChangePersonPayload {\n      success\n    }\n    ... on Error {\n      errorMessage\n      errorCode\n    }\n  }\n  updateOrgSharing(input: {\n        callingAppId: $callingAppId, \n        callingOrgId: $callingOrgId,\n        personId: $personId, \n        sharing: {\n            permittedOrgId: $allowedToCalltOrgId, \n            read: [{orgId: $callingOrgId, key: \"role\"}]\n            write: []\n        }\n    }) {\n    __typename\n    ... on ChangePersonPayload {\n      success\n    }\n    ... on Error {\n      errorMessage\n      errorCode\n    }\n  }\n}\n",
								"variables": "{\n    \"callingAppId\": \"{{sococoAppId}}\",\n    \"personId\": \"{{m3OrgJoeId}}\",\n    \"allowedToCalltOrgId\": \"{{m3OtherOrgId}}\",\n    \"callingOrgId\": \"{{m3AnOrgId}}\"\n}"
							}
						},
						"url": {
							"raw": "{{apiEndpoint}}",
							"host": [
								"{{apiEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Set Case 7 - Make role public & Share Role with AnOrg",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation SetCase7($personId: ID!, $callingAppId: ID!, $allowedToCalltOrgId: ID!, $callingOrgId: ID!) {\n    updateOrgPrivacy(input: {\n        callingAppId: $callingAppId, \n        callingOrgId: $callingOrgId,\n        personId: $personId, \n        publicFields: [{\n            orgId: $callingOrgId,\n            key: \"role\"\n        }]}) {\n    __typename\n    ... on ChangePersonPayload {\n      success\n    }\n    ... on Error {\n      errorMessage\n      errorCode\n    }\n  }\n  updateOrgSharing(input: {\n        callingAppId: $callingAppId, \n        callingOrgId: $callingOrgId,\n        personId: $personId, \n        sharing: {\n            permittedOrgId: $allowedToCalltOrgId, \n            read: [{orgId: $callingOrgId, key: \"role\"}]\n            write: []\n        }\n    }) {\n    __typename\n    ... on ChangePersonPayload {\n      success\n    }\n    ... on Error {\n      errorMessage\n      errorCode\n    }\n  }\n}\n",
								"variables": "{\n    \"callingAppId\": \"{{sococoAppId}}\",\n    \"personId\": \"{{m3OrgJoeId}}\",\n    \"allowedToCalltOrgId\": \"{{m3AnOrgId}}\",\n    \"callingOrgId\": \"{{m3AnOrgId}}\"\n}"
							}
						},
						"url": {
							"raw": "{{apiEndpoint}}",
							"host": [
								"{{apiEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Set Case 8 - Make role public & Share Role with AnOrg and OtherOrg Copy",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation SetCase8($personId: ID!, $callingAppId: ID!, $allowedToCalltOrgId: ID!, $callingOrgId: ID!) {\n    updateOrgPrivacy(input: {\n        callingAppId: $callingAppId, \n        callingOrgId: $callingOrgId,\n        personId: $personId, \n        publicFields: [{\n            orgId: $callingOrgId,\n            key: \"role\"\n        }]}) {\n    __typename\n    ... on ChangePersonPayload {\n      success\n    }\n    ... on Error {\n      errorMessage\n      errorCode\n    }\n  }\n  updateOrgSharing(input: {\n        callingAppId: $callingAppId, \n        callingOrgId: $callingOrgId,\n        personId: $personId, \n        sharing: [{\n            permittedOrgId: $allowedToCalltOrgId, \n            read: [{orgId: $callingOrgId, key: \"role\"}]\n            write: []\n        },{\n            permittedOrgId: $callingOrgId, \n            read: [{orgId: $callingOrgId, key: \"role\"}]\n            write: []\n        }]\n    }) {\n    __typename\n    ... on ChangePersonPayload {\n      success\n    }\n    ... on Error {\n      errorMessage\n      errorCode\n    }\n  }\n}\n",
								"variables": "{\n    \"callingAppId\": \"{{sococoAppId}}\",\n    \"personId\": \"{{m3OrgJoeId}}\",\n    \"allowedToCalltOrgId\": \"{{m3AnOrgId}}\",\n    \"callingOrgId\": \"{{m3AnOrgId}}\"\n}"
							}
						},
						"url": {
							"raw": "{{apiEndpoint}}",
							"host": [
								"{{apiEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Write from AnOrg",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation UpdateOrgData ($input: UpdateOrgDataInput!) {\n  updateOrgData (input: $input) {\n  __typename\n  ...on ChangeOrgDataPayload {\n    success\n  }\n  ...on Error { errorCode errorMessage }\n}\n}",
								"variables": "{\n    \"input\": {\n        \"callingAppId\": \"{{sococoAppId}}\",\n        \"personId\": \"{{m3OrgJoeId}}\",\n        \"callingOrgId\": \"{{m3AnOrgId}}\",\n        \"targetOrgId\": \"{{m3AnOrgId}}\",\n        \"orgData\": \"{\\r\\n  \\\"role\\\": \\\"A Best Dynamic Branding Analyst\\\",\\r\\n  \\\"organization email\\\": \\\"the-dynamic@example.com\\\"\\r\\n}\\r\\n\"\n    }\n}"
							}
						},
						"url": {
							"raw": "{{apiEndpoint}}",
							"host": [
								"{{apiEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Write from OtherOrg",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation UpdateOrgData ($input: UpdateOrgDataInput!) {\n  updateOrgData (input: $input) {\n  __typename\n  ...on ChangeOrgDataPayload {\n    success\n  }\n  ...on Error { errorCode errorMessage }\n}\n}",
								"variables": "{\n    \"input\": {\n        \"callingAppId\": \"{{sococoAppId}}\",\n        \"personId\": \"{{m3OrgJoeId}}\",\n        \"callingOrgId\": \"{{m3OtherOrgId}}\",\n        \"targetOrgId\": \"{{m3AnOrgId}}\",\n        \"orgData\": \"{\\r\\n  \\\"role\\\": \\\"HRXX\\\"}\\r\\n\"\n    }\n}"
							}
						},
						"url": {
							"raw": "{{apiEndpoint}}",
							"host": [
								"{{apiEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Set Case 9 - No Writing Share",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation SetCase9($personId: ID!, $callingAppId: ID!, $callingOrgId: ID!) {\n    updateOrgPrivacy(input: {\n        callingAppId: $callingAppId, \n        callingOrgId: $callingOrgId, \n        personId: $personId, \n        publicFields: [{\n            orgId: $callingOrgId,\n            key: \"role\"\n        }]}) {\n    __typename\n    ... on ChangePersonPayload {\n      success\n    }\n    ... on Error {\n      errorMessage\n      errorCode\n    }\n  }\n  updateOrgSharing(input: {\n        callingAppId: $callingAppId,\n        callingOrgId: $callingOrgId,\n        personId: $personId, \n        sharing: []}) {\n    __typename\n    ... on ChangePersonPayload {\n        success\n    }\n    ... on Error {\n      errorMessage\n      errorCode\n    }\n  }\n}\n",
								"variables": "{\n    \"callingOrgId\": \"{{m3AnOrgId}}\",\n    \"personId\": \"{{m3OrgJoeId}}\",\n    \"callingAppId\": \"{{sococoAppId}}\"\n}"
							}
						},
						"url": {
							"raw": "{{apiEndpoint}}",
							"host": [
								"{{apiEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Set Case 10 - Write Share with OtherOrg",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation SetCase10($personId: ID!, $callingAppId: ID!, $allowedToCalltOrgId: ID!, $callingOrgId: ID!) {\n    updateOrgPrivacy(input: {\n        callingAppId: $callingAppId, \n        callingOrgId: $callingOrgId,\n        personId: $personId, \n        publicFields: [{\n            orgId: $callingOrgId,\n            key: \"role\"\n        }]}) {\n    __typename\n    ... on ChangePersonPayload {\n      success\n    }\n    ... on Error {\n      errorMessage\n      errorCode\n    }\n  }\n  updateOrgSharing(input: {\n        callingAppId: $callingAppId, \n        callingOrgId: $callingOrgId,\n        personId: $personId, \n        sharing: {\n            permittedOrgId: $allowedToCalltOrgId, \n            read: []\n            write: [{orgId: $callingOrgId, key: \"role\"}]\n        }\n    }) {\n    __typename\n    ... on ChangePersonPayload {\n      success\n    }\n    ... on Error {\n      errorMessage\n      errorCode\n    }\n  }\n}\n",
								"variables": "{\n    \"callingAppId\": \"{{sococoAppId}}\",\n    \"personId\": \"{{m3OrgJoeId}}\",\n    \"allowedToCalltOrgId\": \"{{m3OtherOrgId}}\",\n    \"callingOrgId\": \"{{m3AnOrgId}}\"\n}"
							}
						},
						"url": {
							"raw": "{{apiEndpoint}}",
							"host": [
								"{{apiEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Set Case 11 - Write Share with AnOrg",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation SetCase7($personId: ID!, $callingAppId: ID!, $allowedToCalltOrgId: ID!, $callingOrgId: ID!) {\n    updateOrgPrivacy(input: {\n        callingAppId: $callingAppId, \n        callingOrgId: $callingOrgId,\n        personId: $personId, \n        publicFields: [{\n            orgId: $callingOrgId,\n            key: \"role\"\n        }]}) {\n    __typename\n    ... on ChangePersonPayload {\n      success\n    }\n    ... on Error {\n      errorMessage\n      errorCode\n    }\n  }\n  updateOrgSharing(input: {\n        callingAppId: $callingAppId, \n        callingOrgId: $callingOrgId,\n        personId: $personId, \n        sharing: {\n            permittedOrgId: $allowedToCalltOrgId, \n            read: []\n            write: [{orgId: $callingOrgId, key: \"role\"}]\n        }\n    }) {\n    __typename\n    ... on ChangePersonPayload {\n      success\n    }\n    ... on Error {\n      errorMessage\n      errorCode\n    }\n  }\n}\n",
								"variables": "{\n    \"callingAppId\": \"{{sococoAppId}}\",\n    \"personId\": \"{{m3OrgJoeId}}\",\n    \"allowedToCalltOrgId\": \"{{m3AnOrgId}}\",\n    \"callingOrgId\": \"{{m3AnOrgId}}\"\n}"
							}
						},
						"url": {
							"raw": "{{apiEndpoint}}",
							"host": [
								"{{apiEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Set Case 12 - Write Share with OtherOrg and AnOrg",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation SetCase8($personId: ID!, $callingAppId: ID!, $allowedToCalltOrgId: ID!, $callingOrgId: ID!) {\n    updateOrgPrivacy(input: {\n        callingAppId: $callingAppId, \n        callingOrgId: $callingOrgId,\n        personId: $personId, \n        publicFields: [{\n            orgId: $callingOrgId,\n            key: \"role\"\n        }]}) {\n    __typename\n    ... on ChangePersonPayload {\n      success\n    }\n    ... on Error {\n      errorMessage\n      errorCode\n    }\n  }\n  updateOrgSharing(input: {\n        callingAppId: $callingAppId, \n        callingOrgId: $callingOrgId,\n        personId: $personId, \n        sharing: [{\n            permittedOrgId: $allowedToCalltOrgId, \n            read: []\n            write: [{orgId: $callingOrgId, key: \"role\"}]\n        },{\n            permittedOrgId: $callingOrgId, \n            read: []\n            write: [{orgId: $callingOrgId, key: \"role\"}]\n        }]\n    }) {\n    __typename\n    ... on ChangePersonPayload {\n      success\n    }\n    ... on Error {\n      errorMessage\n      errorCode\n    }\n  }\n}\n",
								"variables": "{\n    \"callingAppId\": \"{{sococoAppId}}\",\n    \"personId\": \"{{m3OrgJoeId}}\",\n    \"allowedToCalltOrgId\": \"{{m3OtherOrgId}}\",\n    \"callingOrgId\": \"{{m3AnOrgId}}\"\n}"
							}
						},
						"url": {
							"raw": "{{apiEndpoint}}",
							"host": [
								"{{apiEndpoint}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "M4 - OpenSearch synchronization",
			"item": [
				{
					"name": "Setup",
					"item": [
						{
							"name": "1. Create M4 App",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation CreateM4App($appName: String!, $appMetadata: AWSJSON!) {\n    createApp(input: {callingAppId: \"{{directoryServiceAppId}}\", metadata: $appMetadata, name: $appName}) {\n    ... on ChangeAppPayload {\n      __typename\n      success\n      app {\n        id\n        metadata {\n          suggestible\n          searchable\n          schema\n          required\n          properties {\n            format\n            key\n            type\n          }\n        }\n        name\n      }\n    }\n    ... on InvalidAppConfig {\n      errorMessage\n      errorCode\n    }\n    ... on AppNotFound {\n      errorMessage\n      errorCode\n    }\n  }\n}\n",
										"variables": "{\n    \"appName\": \"M4\",\n    \"appMetadata\": \"{\\\"$schema\\\":\\\"https://directory-service-schemas.s3.amazonaws.com/app-schema-01.json\\\",\\\"properties\\\": {\\\"birthday\\\": {\\\"type\\\":\\\"string\\\", \\\"format\\\":\\\"date\\\"}, \\\"title\\\": {\\\"type\\\":\\\"string\\\" }, \\\"configuration\\\": {\\\"type\\\":\\\"object\\\" } },\\\"required\\\": [\\\"birthday\\\",\\\"title\\\",\\\"configuration\\\"],\\\"suggestible\\\": [\\\"title\\\"],\\\"searchable\\\": [\\\"birthday\\\",\\\"title\\\",\\\"configuration\\\"]}\"\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. Create Joe Bloggs",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation CreateM4Person($m4AppId: ID!, $appData: AWSJSON, $familyName: String!, $givenName: String!, $primaryEmail: AWSEmail!) {\n  createPerson(input: {appData: $appData, callingAppId: $m4AppId, familyName: $familyName, givenName: $givenName, primaryEmail: $primaryEmail}) {\n    __typename\n        ... on ChangePersonPayload {\n            person {\n                id\n                data {\n                    __typename\n                    ... on AppData {\n                        app {\n                            id\n                            name\n                        }\n                        data {\n                            key\n                            value\n                        }\n                    }\n                    ... on OrgData {\n                        org {\n                            id\n                            name\n                        }\n                        data {\n                            key\n                            value\n                        }\n                    }\n                }\n            }\n            success\n        }\n        ... on Error {\n            errorMessage\n            errorCode\n        }\n    }\n}\n",
										"variables": "{\n    \"familyName\": \"Bloggs\",\n    \"givenName\": \"Joe\",\n    \"primaryEmail\": \"joe@gmail.com\",\n    \"appData\": \"{\\\"birthday\\\":\\\"2001-01-01\\\",\\\"title\\\":\\\"Software Engineer\\\",\\\"configuration\\\":{\\\"property1\\\":\\\"index this\\\", \\\"property2\\\":{\\\"property3\\\": \\\"index that\\\"}}}\",\n    \"m4AppId\": \"{{m4AppId}}\"\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "3. Share all fields",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation SetCase8($personId: ID!, $m4AppId: ID!, $directoryServiceAppId: ID!) {\n    updateAppPrivacy(input: {\n        callingAppId: $m4AppId, \n        personId: $personId, \n        publicFields: [\n        {\n            appId: $directoryServiceAppId,\n            key: \"*\"\n        },\n        {\n            appId: $m4AppId,\n            key: \"title\"\n        }, {\n            appId: $m4AppId,\n            key: \"birthday\"\n        }, {\n            appId: $m4AppId,\n            key: \"configuration\"\n        }]}) {\n    __typename\n    ... on ChangePersonPayload {\n      success\n    }\n    ... on Error {\n      errorMessage\n      errorCode\n    }\n  }\n}\n",
										"variables": "{\n    \"personId\": \"{{m4JoeId}}\",\n    \"directoryServiceAppId\": \"{{directoryServiceAppId}}\",\n    \"m4AppId\": \"{{m4AppId}}\"\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "4. Make Birthday private",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation SetCase8($personId: ID!, $m4AppId: ID!) {\n    updateAppPrivacy(input: {\n        callingAppId: $m4AppId, \n        personId: $personId, \n        publicFields: [{\n            appId: $m4AppId,\n            key: \"title\"\n        }, {\n            appId: $m4AppId,\n            key: \"configuration\"\n        }]}) {\n    __typename\n    ... on ChangePersonPayload {\n      success\n    }\n    ... on Error {\n      errorMessage\n      errorCode\n    }\n  }\n}\n",
										"variables": "{\n    \"personId\": \"{{m4JoeId}}\",\n    \"directoryServiceAppId\": \"{{directoryServiceAppId}}\",\n    \"m4AppId\": \"{{m4AppId}}\"\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Joe gets his own data",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query GetPersonById($callingAppId: ID!, $personId: ID!) {\n  getPersonById(callingAppId: $callingAppId, callingPersonId: $personId, targetPersonId: $personId) {\n    id\n        data {\n            __typename\n            ... on AppData {\n                app {\n                    id\n                    name\n                }\n                data {\n                    key\n                    value\n                }\n            }\n            ... on OrgData {\n                org {\n                    id\n                    name\n                }\n                data {\n                    key\n                    value\n                }\n            }\n        }\n    sharing {\n        permittedOrigin {\n            __typename\n            name\n        }\n        read {\n            origin {\n                __typename\n                name\n            }\n            property {\n                key\n            }\n        }\n        write {\n            origin {\n                __typename\n                name\n            }\n            property {\n                key\n            }\n        }\n    }\n    privacy {\n        public {\n            origin {\n                __typename\n                name\n            }\n            property {\n                key\n            }\n        }\n    }\n  }\n}\n",
										"variables": "{\n    \"callingAppId\": \"{{m4AppId}}\",\n    \"personId\": \"{{m4JoeId}}\"\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Someone get Joe's data",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query GetPersonById($callingAppId: ID!, $callingPersonId: ID!, $targetPersonId: ID!) {\n  getPersonById(callingAppId: $callingAppId, callingPersonId: $callingPersonId, targetPersonId: $targetPersonId) {\n    id\n        data {\n            __typename\n            ... on AppData {\n                app {\n                    id\n                    name\n                }\n                data {\n                    key\n                    value\n                }\n            }\n            ... on OrgData {\n                org {\n                    id\n                    name\n                }\n                data {\n                    key\n                    value\n                }\n            }\n        }\n    sharing {\n        permittedOrigin {\n            __typename\n            name\n        }\n        read {\n            origin {\n                __typename\n                name\n            }\n            property {\n                key\n            }\n        }\n        write {\n            origin {\n                __typename\n                name\n            }\n            property {\n                key\n            }\n        }\n    }\n    privacy {\n        public {\n            origin {\n                __typename\n                name\n            }\n            property {\n                key\n            }\n        }\n    }\n  }\n}\n",
										"variables": "{\n    \"callingAppId\": \"{{exampleAppId}}\",\n    \"callingPersonId\": \"{{examplePersonId}}\",\n    \"targetPersonId\": \"{{m4JoeId}}\"\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "X-1. Delete Joe AppData and Person",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation DeletePerson($callingAppId: ID!, $targetPersonId: ID!) {\n    deleteAppData(input: {callingAppId: $callingAppId, personId: $targetPersonId}) {\n    __typename\n    ... on ChangeAppDataPayload {\n      success\n    }\n    ... on Error {\n      errorMessage\n      errorCode\n    }\n  }\n  deletePerson(input: {callingAppId: $callingAppId, personId: $targetPersonId}) {\n    __typename\n        ... on ChangePersonPayload {\n            person {\n                id\n                data {\n                    __typename\n                    ... on AppData {\n                        app {\n                            id\n                            name\n                        }\n                        data {\n                            key\n                            value\n                        }\n                    }\n                    ... on OrgData {\n                        org {\n                            id\n                            name\n                        }\n                        data {\n                            key\n                            value\n                        }\n                    }\n                }\n            }\n            success\n        }\n        ... on Error {\n            errorMessage\n            errorCode\n        }\n    }\n}\n",
										"variables": "{\n    \"callingAppId\": \"{{m4AppId}}\",\n    \"targetPersonId\": \"{{m4JoeId}}\"\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "X. Delete M4 App",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation DeleteApp ($appId: ID!) {\n    deleteApp(input: {callingAppId: \"{{directoryServiceAppId}}\", targetAppId: $appId}) {\n    ... on ChangeAppPayload {\n      __typename\n      success\n      app {\n        id\n        metadata {\n          suggestible\n          searchable\n          schema\n          required\n          properties {\n            format\n            key\n            type\n          }\n        }\n        name\n      }\n    }\n    ... on Error {\n      errorMessage\n      errorCode\n    }\n  }\n}\n",
										"variables": "{\n    \"appId\": \"{{m4AppId}}\"\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "M5 - Person Search",
			"item": [
				{
					"name": "Setup",
					"item": [
						{
							"name": "1. Create M5 App",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation CreateM5App($appName: String!, $appMetadata: AWSJSON!) {\n    createApp(input: {callingAppId: \"{{directoryServiceAppId}}\", metadata: $appMetadata, name: $appName}) {\n    ... on ChangeAppPayload {\n      __typename\n      success\n      app {\n        id\n        metadata {\n          suggestible\n          searchable\n          schema\n          required\n          properties {\n            format\n            key\n            type\n          }\n        }\n        name\n      }\n    }\n    ... on Error {\n      errorMessage\n      errorCode\n    }\n  }\n}\n",
										"variables": "{\n    \"appName\": \"M5\",\n    \"appMetadata\": \"{\\\"$schema\\\":\\\"https://directory-service-schemas.s3.amazonaws.com/app-schema-01.json\\\",\\\"properties\\\": {\\\"birthday\\\": {\\\"type\\\":\\\"string\\\", \\\"format\\\":\\\"date\\\"}, \\\"title\\\": {\\\"type\\\":\\\"string\\\" }, \\\"configuration\\\": {\\\"type\\\":\\\"object\\\" } },\\\"required\\\": [\\\"birthday\\\",\\\"title\\\",\\\"configuration\\\"],\\\"suggestible\\\": [\\\"title\\\"],\\\"searchable\\\": [\\\"birthday\\\",\\\"title\\\",\\\"configuration\\\"]}\"\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. Create Chess App",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation CreateSococoApp($appName: String!, $appMetadata: AWSJSON!) {\n    createApp(input: {callingAppId: \"{{directoryServiceAppId}}\", metadata: $appMetadata, name: $appName}) {\n    ... on ChangeAppPayload {\n      __typename\n      success\n      app {\n        id\n        metadata {\n          suggestible\n          searchable\n          schema\n          required\n          properties {\n            format\n            key\n            type\n          }\n        }\n        name\n      }\n    }\n    ... on InvalidAppConfig {\n      errorMessage\n      errorCode\n    }\n    ... on AppNotFound {\n      errorMessage\n      errorCode\n    }\n  }\n}\n",
										"variables": "{\n    \"appName\": \"Chess\",\n    \"appMetadata\": \"{{chessAppConfig}}\"\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "3. Create Joe Bloggs",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation CreateM4Person($m4AppId: ID!, $appData: AWSJSON, $familyName: String!, $givenName: String!, $primaryEmail: AWSEmail!) {\n  createPerson(input: {appData: $appData, callingAppId: $m4AppId, familyName: $familyName, givenName: $givenName, primaryEmail: $primaryEmail}) {\n    __typename\n        ... on ChangePersonPayload {\n            person {\n                id\n                data {\n                    __typename\n                    ... on AppData {\n                        app {\n                            id\n                            name\n                        }\n                        data {\n                            key\n                            value\n                        }\n                    }\n                    ... on OrgData {\n                        org {\n                            id\n                            name\n                        }\n                        data {\n                            key\n                            value\n                        }\n                    }\n                }\n            }\n            success\n        }\n        ... on Error {\n            errorMessage\n            errorCode\n        }\n    }\n}\n",
										"variables": "{\n    \"familyName\": \"Bloggs\",\n    \"givenName\": \"Joe\",\n    \"primaryEmail\": \"joe@gmail.com\",\n    \"appData\": \"{\\\"birthday\\\":\\\"2001-01-01\\\",\\\"title\\\":\\\"Software Engineer\\\",\\\"configuration\\\":{\\\"property1\\\":\\\"index this\\\", \\\"property2\\\":{\\\"property3\\\": \\\"index that\\\"}}}\",\n    \"m4AppId\": \"{{m5AppId}}\"\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "4. Create Jane Blings",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation CreateM4Person($m4AppId: ID!, $appData: AWSJSON, $familyName: String!, $givenName: String!, $primaryEmail: AWSEmail!) {\n  createPerson(input: {appData: $appData, callingAppId: $m4AppId, familyName: $familyName, givenName: $givenName, primaryEmail: $primaryEmail}) {\n    __typename\n        ... on ChangePersonPayload {\n            person {\n                id\n                data {\n                    __typename\n                    ... on AppData {\n                        app {\n                            id\n                            name\n                        }\n                        data {\n                            key\n                            value\n                        }\n                    }\n                    ... on OrgData {\n                        org {\n                            id\n                            name\n                        }\n                        data {\n                            key\n                            value\n                        }\n                    }\n                }\n            }\n            success\n        }\n        ... on Error {\n            errorMessage\n            errorCode\n        }\n    }\n}\n",
										"variables": "{\n    \"familyName\": \"Blinks\",\n    \"givenName\": \"Jane\",\n    \"primaryEmail\": \"jane@gmail.com\",\n    \"appData\": \"{\\\"birthday\\\":\\\"2001-01-01\\\",\\\"title\\\":\\\"Software Engineer\\\",\\\"configuration\\\":{\\\"property1\\\":\\\"index that\\\", \\\"property2\\\":{\\\"property3\\\": \\\"index this\\\"}}}\",\n    \"m4AppId\": \"{{m5AppId}}\"\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "5. Add Joe to Chess",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation CreateAppData($chessAppId: ID!, $appData: AWSJSON!, $personId: ID!) {\n  createAppData(input: {appData: $appData, callingAppId: $chessAppId, personId: $personId}) {\n    __typename\n    ... on ChangeAppDataPayload {\n      success\n    }\n        ... on InvalidAppData {\n      errorMessage\n      errorCode\n    }\n    ... on AppNotFound {\n      errorMessage\n      errorCode\n    }\n    ... on PersonNotFound {\n      errorMessage\n      errorCode\n    }\n  }\n}\n",
										"variables": "{\n    \"chessAppId\": \"{{chessAppId}}\",\n    \"personId\": \"{{m5JoeId}}\",\n    \"appData\": \"{  \\\"username\\\": \\\"joeb\\\",  \\\"ranking\\\": 1}\"\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "6. Joe sets public: DS + M5, and shares Chess Ranking with M5",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation SetCase8($personId: ID!, $m5AppId: ID!, $directoryServiceAppId: ID!, $chessAppId: ID!) {\n    updateAppPrivacy(input: {\n        callingAppId: $m5AppId, \n        personId: $personId, \n        publicFields: [{\n            appId: $m5AppId,\n            key: \"*\"\n        }, {\n            appId: $directoryServiceAppId,\n            key: \"*\"\n        }]}) {\n    __typename\n    ... on ChangePersonPayload {\n      success\n    }\n    ... on Error {\n      errorMessage\n      errorCode\n    }\n  }\n  updateAppSharing(input: {\n        callingAppId: $m5AppId, \n        personId: $personId, \n        sharing: [{\n            permittedAppId: $m5AppId, \n            read: [{appId: $chessAppId, key: \"ranking\"}]\n            write: []\n        }]\n    }) {\n    __typename\n    ... on ChangePersonPayload {\n      success\n    }\n    ... on Error {\n      errorMessage\n      errorCode\n    }\n  }\n}\n",
										"variables": "{\n    \"personId\": \"{{m5JoeId}}\",\n    \"directoryServiceAppId\": \"{{directoryServiceAppId}}\",\n    \"m5AppId\": \"{{m5AppId}}\",\n    \"chessAppId\": \"{{chessAppId}}\"\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "7. Jane sets public: DS.name + M4.title, no sharing",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation Jane($personId: ID!, $m5AppId: ID!, $directoryServiceAppId: ID!) {\n    updateAppPrivacy(input: {\n        callingAppId: $m5AppId, \n        personId: $personId, \n        publicFields: [{\n            appId: $m5AppId,\n            key: \"title\"\n        }, {\n            appId: $directoryServiceAppId,\n            key: \"givenName\"\n        }, {\n            appId: $directoryServiceAppId,\n            key: \"familyName\"\n        }]}) {\n    __typename\n    ... on ChangePersonPayload {\n      success\n    }\n    ... on Error {\n      errorMessage\n      errorCode\n    }\n  }\n}\n",
										"variables": "{\n    \"personId\": \"{{m5JaneId}}\",\n    \"directoryServiceAppId\": \"{{directoryServiceAppId}}\",\n    \"m5AppId\": \"{{m5AppId}}\",\n    \"chessAppId\": \"{{chessAppId}}\"\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "M5.S1.UC1 - Search against a public field.",
					"item": [
						{
							"name": "Joe searches for Software (public field)",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query FindPeople($callingAppId: ID!, $personId: ID!, $searchTerm: String!) {\n  findPeople(callingAppId: $callingAppId, callingPersonId: $personId, searchTerm: $searchTerm) {\n    result {\n        id\n        data {\n            __typename\n            ... on AppData {\n                app {\n                    id\n                    name\n                }\n                data {\n                    key\n                    value\n                }\n            }\n            ... on OrgData {\n                org {\n                    id\n                    name\n                }\n                data {\n                    key\n                    value\n                }\n            }\n        }\n    }\n  }\n}",
										"variables": "{\n    \"callingAppId\": \"{{m5AppId}}\",\n    \"personId\": \"{{m5JoeId}}\",\n    \"searchTerm\": \"Software\"\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Joe searches for Soft (public field)",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query FindPeople($callingAppId: ID!, $personId: ID!, $searchTerm: String!) {\n  findPeople(callingAppId: $callingAppId, callingPersonId: $personId, searchTerm: $searchTerm) {\n    result {\n        id\n        data {\n            __typename\n            ... on AppData {\n                app {\n                    id\n                    name\n                }\n                data {\n                    key\n                    value\n                }\n            }\n            ... on OrgData {\n                org {\n                    id\n                    name\n                }\n                data {\n                    key\n                    value\n                }\n            }\n        }\n    }\n  }\n}",
										"variables": "{\n    \"callingAppId\": \"{{m5AppId}}\",\n    \"personId\": \"{{m5JoeId}}\",\n    \"searchTerm\": \"Soft\"\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "M5.S1.UC2 - Search against a private field.",
					"item": [
						{
							"name": "Joe searches for Birthday (Jane's private field)",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query FindPeople($callingAppId: ID!, $personId: ID!, $searchTerm: String!) {\n  findPeople(callingAppId: $callingAppId, callingPersonId: $personId, searchTerm: $searchTerm) {\n    result {\n        id\n        data {\n            __typename\n            ... on AppData {\n                app {\n                    id\n                    name\n                }\n                data {\n                    key\n                    value\n                }\n            }\n            ... on OrgData {\n                org {\n                    id\n                    name\n                }\n                data {\n                    key\n                    value\n                }\n            }\n        }\n    }\n  }\n}",
										"variables": "{\n    \"callingAppId\": \"{{m5AppId}}\",\n    \"personId\": \"{{m5JoeId}}\",\n    \"searchTerm\": \"2001\"\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Jane searches for Birthday (Jane's private field)",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query FindPeople($callingAppId: ID!, $personId: ID!, $searchTerm: String!) {\n  findPeople(callingAppId: $callingAppId, callingPersonId: $personId, searchTerm: $searchTerm) {\n    result {\n        id\n        data {\n            __typename\n            ... on AppData {\n                app {\n                    id\n                    name\n                }\n                data {\n                    key\n                    value\n                }\n            }\n            ... on OrgData {\n                org {\n                    id\n                    name\n                }\n                data {\n                    key\n                    value\n                }\n            }\n        }\n    }\n  }\n}",
										"variables": "{\n    \"callingAppId\": \"{{m5AppId}}\",\n    \"personId\": \"{{m5JaneId}}\",\n    \"searchTerm\": \"2001\"\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "M5.S1.UC4 - View your own Profile",
					"item": [
						{
							"name": "Joe gets his own profile from M4 app",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query GetPersonById($callingAppId: ID!, $personId: ID!) {\n  getPersonById(callingAppId: $callingAppId, callingPersonId: $personId, targetPersonId: $personId) {\n    id\n        data {\n            __typename\n            ... on AppData {\n                app {\n                    id\n                    name\n                }\n                data {\n                    key\n                    value\n                }\n            }\n            ... on OrgData {\n                org {\n                    id\n                    name\n                }\n                data {\n                    key\n                    value\n                }\n            }\n        }\n    }\n}\n",
										"variables": "{\n    \"callingAppId\": \"{{m5AppId}}\",\n    \"personId\": \"{{m5JoeId}}\"\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Joe gets his own profile from Chess app",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query GetPersonById($callingAppId: ID!, $personId: ID!) {\n  getPersonById(callingAppId: $callingAppId, callingPersonId: $personId, targetPersonId: $personId) {\n    id\n        data {\n            __typename\n            ... on AppData {\n                app {\n                    id\n                    name\n                }\n                data {\n                    key\n                    value\n                }\n            }\n            ... on OrgData {\n                org {\n                    id\n                    name\n                }\n                data {\n                    key\n                    value\n                }\n            }\n        }\n    }\n}\n",
										"variables": "{\n    \"callingAppId\": \"{{chessAppId}}\",\n    \"personId\": \"{{m5JoeId}}\"\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "M5.S1.UC3 - View another Person’s profile.",
					"item": [
						{
							"name": "Jane gets Joe's profile from M4 app",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query GetPersonById($callingAppId: ID!, $callingPersonId: ID!, $targetPersonId: ID!) {\n  getPersonById(callingAppId: $callingAppId, callingPersonId: $callingPersonId, targetPersonId: $targetPersonId) {\n    id\n        data {\n            __typename\n            ... on AppData {\n                app {\n                    id\n                    name\n                }\n                data {\n                    key\n                    value\n                }\n            }\n            ... on OrgData {\n                org {\n                    id\n                    name\n                }\n                data {\n                    key\n                    value\n                }\n            }\n        }\n    }\n}\n",
										"variables": "{\n    \"callingAppId\": \"{{m5AppId}}\",\n    \"callingPersonId\": \"{{m5JaneId}}\",\n    \"targetPersonId\": \"{{m5JoeId}}\"\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Jane gets Joe's profile from Chess app",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query GetPersonById($callingAppId: ID!, $callingPersonId: ID!, $targetPersonId: ID!) {\n  getPersonById(callingAppId: $callingAppId, callingPersonId: $callingPersonId, targetPersonId: $targetPersonId) {\n    id\n        data {\n            __typename\n            ... on AppData {\n                app {\n                    id\n                    name\n                }\n                data {\n                    key\n                    value\n                }\n            }\n            ... on OrgData {\n                org {\n                    id\n                    name\n                }\n                data {\n                    key\n                    value\n                }\n            }\n        }\n    }\n}\n",
										"variables": "{\n    \"callingAppId\": \"{{chessAppId}}\",\n    \"callingPersonId\": \"{{m5JaneId}}\",\n    \"targetPersonId\": \"{{m5JoeId}}\"\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "M5.S1.UC5 - Get an auto-complete suggestion.",
					"item": [
						{
							"name": "Joe request suggestions for Soft",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query GetSuggestions($callingAppId: ID!, $personId: ID!, $searchTerm: String!) {\n  getSuggestions(callingAppId: $callingAppId, callingPersonId: $personId, searchTerm: $searchTerm) {\n      __typename\n    ... on SuggestionPayload {\n        result \n    }\n    ... on Error {\n      errorCode\n      errorMessage\n    }\n  }\n}",
										"variables": "{\n    \"callingAppId\": \"{{m4AppId}}\",\n    \"personId\": \"{{joeId}}\",\n    \"searchTerm\": \"eng\"\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Joe request suggestions for 20",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query GetSuggestions($callingAppId: ID!, $personId: ID!, $searchTerm: String!) {\n  getSuggestions(callingAppId: $callingAppId, callingPersonId: $personId, searchTerm: $searchTerm) {\n      __typename\n    ... on SuggestionPayload {\n        result \n    }\n    ... on Error {\n      errorCode\n      errorMessage\n    }\n  }\n}",
										"variables": "{\n    \"callingAppId\": \"{{m4AppId}}\",\n    \"personId\": \"{{joeId}}\",\n    \"searchTerm\": \"20\"\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Joe request suggestions for Jo",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query GetSuggestions($callingAppId: ID!, $personId: ID!, $searchTerm: String!) {\n  getSuggestions(callingAppId: $callingAppId, callingPersonId: $personId, searchTerm: $searchTerm) {\n      __typename\n    ... on SuggestionPayload {\n        result \n    }\n    ... on Error {\n      errorCode\n      errorMessage\n    }\n  }\n}",
										"variables": "{\n    \"callingAppId\": \"{{m4AppId}}\",\n    \"personId\": \"{{joeId}}\",\n    \"searchTerm\": \"Jo\"\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Joe request suggestions for Ja",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query GetSuggestions($callingAppId: ID!, $personId: ID!, $searchTerm: String!) {\n  getSuggestions(callingAppId: $callingAppId, callingPersonId: $personId, searchTerm: $searchTerm) {\n      __typename\n    ... on SuggestionPayload {\n        result \n    }\n    ... on Error {\n      errorCode\n      errorMessage\n    }\n  }\n}",
										"variables": "{\n    \"callingAppId\": \"{{m4AppId}}\",\n    \"personId\": \"{{joeId}}\",\n    \"searchTerm\": \"Ja\"\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Joe request suggestions for J",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query GetSuggestions($callingAppId: ID!, $personId: ID!, $searchTerm: String!) {\n  getSuggestions(callingAppId: $callingAppId, callingPersonId: $personId, searchTerm: $searchTerm) {\n      __typename\n    ... on SuggestionPayload {\n        result \n    }\n    ... on Error {\n      errorCode\n      errorMessage\n    }\n  }\n}",
										"variables": "{\n    \"callingAppId\": \"{{m4AppId}}\",\n    \"personId\": \"{{joeId}}\",\n    \"searchTerm\": \"J\"\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Teardown",
					"item": [
						{
							"name": "Delete Apps",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation DeleteApp ($app1Id: ID!, $app2Id: ID!) {\n    delete1: deleteApp(input: {callingAppId: \"{{directoryServiceAppId}}\", targetAppId: $app1Id}) {\n    __typename\n    ... on ChangeAppPayload {\n      success\n      app {\n        id\n        metadata {\n          suggestible\n          searchable\n          schema\n          required\n          properties {\n            format\n            key\n            type\n          }\n        }\n        name\n      }\n    }\n    ... on Error {\n      errorMessage\n      errorCode\n    }\n  }\n  delete2: deleteApp(input: {callingAppId: \"{{directoryServiceAppId}}\", targetAppId: $app2Id}) {\n    __typename\n    ... on ChangeAppPayload {\n      success\n      app {\n        id\n        metadata {\n          suggestible\n          searchable\n          schema\n          required\n          properties {\n            format\n            key\n            type\n          }\n        }\n        name\n      }\n    }\n    ... on Error {\n      errorMessage\n      errorCode\n    }\n  }\n}\n",
										"variables": "{\n    \"app1Id\": \"{{m5AppId}}\",\n    \"app2Id\": \"{{chessAppId}}\"\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete People",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation DeletePeople($person1: ID!, $person2: ID!) {\n  delete1: deletePerson(input: {callingAppId: \"{{directoryServiceAppId}}\", personId: $person1}) {\n    __typename\n        ... on ChangePersonPayload {\n            person {\n                id\n                data {\n                    __typename\n                    ... on AppData {\n                        app {\n                            id\n                            name\n                        }\n                        data {\n                            key\n                            value\n                        }\n                    }\n                    ... on OrgData {\n                        org {\n                            id\n                            name\n                        }\n                        data {\n                            key\n                            value\n                        }\n                    }\n                }\n            }\n            success\n        }\n        ... on Error {\n            errorMessage\n            errorCode\n        }\n    }\n  delete2: deletePerson(input: {callingAppId: \"{{directoryServiceAppId}}\", personId: $person2}) {\n    __typename\n        ... on ChangePersonPayload {\n            person {\n                id\n                data {\n                    __typename\n                    ... on AppData {\n                        app {\n                            id\n                            name\n                        }\n                        data {\n                            key\n                            value\n                        }\n                    }\n                    ... on OrgData {\n                        org {\n                            id\n                            name\n                        }\n                        data {\n                            key\n                            value\n                        }\n                    }\n                }\n            }\n            success\n        }\n        ... on Error {\n            errorMessage\n            errorCode\n        }\n    }\n}\n",
										"variables": "{\n    \"person1\": \"{{m5JoeId}}\",\n    \"person2\": \"{{m5JaneId}}\"\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "M5 - Person Search - Org",
			"item": [
				{
					"name": "Setup",
					"item": [
						{
							"name": "1. Create Sococo App",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation CreateSococoApp($appName: String!, $appMetadata: AWSJSON!) {\n    createApp(input: {callingAppId: \"{{directoryServiceAppId}}\", metadata: $appMetadata, name: $appName}) {\n    ... on ChangeAppPayload {\n      __typename\n      success\n      app {\n        id\n        metadata {\n          suggestible\n          searchable\n          schema\n          required\n          properties {\n            format\n            key\n            type\n          }\n        }\n        name\n      }\n    }\n    ... on InvalidAppConfig {\n      errorMessage\n      errorCode\n    }\n    ... on AppNotFound {\n      errorMessage\n      errorCode\n    }\n  }\n}\n",
										"variables": "{\n    \"appName\": \"Sococo\",\n    \"appMetadata\": \"{{sococoAppConfig}}\"\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. Create AnOrg",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation CreateOrg ($input: CreateOrgInput!) {\n  createOrg (input: $input) {\n  __typename\n  ...on ChangeOrgPayload {\n    success\n    org {\n      id name\n      metadata {\n        schema searchable suggestible required\n        properties {\n          key format type\n        }\n      }\n    }\n  }\n  ...on Error { errorCode errorMessage }\n}\n}",
										"variables": "{\n    \"input\": {\n            \"callingAppId\": \"{{directoryServiceAppId}}\",\n            \"name\": \"AnOrg\",\n            \"metadata\": \"{\\r\\n  \\\"$schema\\\": \\\"https:\\/\\/schemas.sococo5k.com\\/app-schema-01.json\\\",\\r\\n  \\\"properties\\\": {\\r\\n    \\\"organization email\\\": {\\r\\n      \\\"type\\\": \\\"string\\\",\\r\\n      \\\"format\\\": \\\"email\\\"\\r\\n    },\\r\\n    \\\"role\\\": {\\r\\n      \\\"type\\\": \\\"string\\\"\\r\\n    }\\r\\n  },\\r\\n  \\\"searchable\\\": [\\\"organization email\\\",\\\"role\\\"],\\r\\n  \\\"suggestible\\\": [\\\"role\\\"],\\r\\n  \\\"required\\\": [\\\"role\\\"]\\r\\n}\\r\\n\"\n          }\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "3. Create OtherOrg",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation CreateOrg ($input: CreateOrgInput!) {\n  createOrg (input: $input) {\n  __typename\n  ...on ChangeOrgPayload {\n    success\n    org {\n      id name\n      metadata {\n        schema searchable suggestible required\n        properties {\n          key format type\n        }\n      }\n    }\n  }\n  ...on Error { errorCode errorMessage }\n}\n}",
										"variables": "{\n    \"input\": {\n            \"callingAppId\": \"{{directoryServiceAppId}}\",\n            \"name\": \"OtherOrg\",\n            \"metadata\": \"{\\r\\n  \\\"$schema\\\": \\\"https:\\/\\/schemas.sococo5k.com\\/app-schema-01.json\\\",\\r\\n  \\\"properties\\\": {\\r\\n    \\\"organization phone\\\": {\\r\\n      \\\"type\\\": \\\"string\\\"    },\\r\\n    \\\"class\\\": {\\r\\n      \\\"type\\\": \\\"string\\\"\\r\\n    }\\r\\n  },\\r\\n  \\\"searchable\\\": [\\\"organization phone\\\",\\\"class\\\"],\\r\\n  \\\"suggestible\\\": [\\\"class\\\"],\\r\\n  \\\"required\\\": [\\\"class\\\"]\\r\\n}\\r\\n\"\n          }\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "4. Add AnOrg to Sococo App",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation AddOrgToApp ($input: AddOrgToAppInput!) {\n  addOrgToApp (input: $input) {\n  __typename\n  ...on ChangeHierarchyPayload {\n    success\n  }\n  ...on Error { errorCode errorMessage }\n}\n}",
										"variables": "{\n    \"input\": {\n            \"callingAppId\": \"{{sococoAppId}}\",\n            \"callingOrgId\": \"{{m5AnOrgId}}\"\n          }\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "5. Add OtherOrg to Sococo App",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation AddOrgToApp ($input: AddOrgToAppInput!) {\n  addOrgToApp (input: $input) {\n  __typename\n  ...on ChangeHierarchyPayload {\n    success\n  }\n  ...on Error { errorCode errorMessage }\n}\n}",
										"variables": "{\n    \"input\": {\n            \"callingAppId\": \"{{sococoAppId}}\",\n            \"callingOrgId\": \"{{m5OtherOrgId}}\"\n          }\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "6. Create Joe Bloggs",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation CreatePerson($sococoAppId: ID!, $appData: AWSJSON, $familyName: String!, $givenName: String!, $primaryEmail: AWSEmail!) {\n  createPerson(input: {appData: $appData, callingAppId: $sococoAppId, familyName: $familyName, givenName: $givenName, primaryEmail: $primaryEmail}) {\n    __typename\n    ... on ChangePersonPayload {\n      person { id data {\n    ... on AppData {\n      __typename\n      app {\n        id\n        metadata {\n          properties {\n            format\n            key\n            type\n          }\n          required\n          schema\n          searchable\n          suggestible\n        }\n        name\n      }\n      data {\n        key value\n      }\n    }\n    ... on OrgData {\n      __typename\n      org {\n        id\n        metadata {\n          properties {\n            format\n            key\n            type\n          }\n          required\n          schema\n          searchable\n          suggestible\n        }\n        name\n      }\n      data {\n        key value\n      }\n    }\n  }\n  privacy {\n    public {\n      origin {\n        __typename\n        id\n        metadata {\n          properties {\n            format\n            key\n            type\n          }\n          required\n          schema\n          searchable\n          suggestible\n        }\n        name\n      }\n      property { key type format }\n    }\n  }\n  sharing {\n    permittedOrigin {\n      __typename\n      id\n      metadata {\n        properties {\n          format\n          key\n          type\n        }\n        required\n        schema\n        searchable\n        suggestible\n      }\n      name\n    }\n    read {\n      origin {\n        __typename\n        id\n        metadata {\n          properties {\n            format\n            key\n            type\n          }\n          required\n          schema\n          searchable\n          suggestible\n        }\n        name\n      }\n      property { key type format }\n    }\n    write {\n      origin {\n        __typename\n        id\n        metadata {\n          properties {\n            format\n            key\n            type\n          }\n          required\n          schema\n          searchable\n          suggestible\n        }\n        name\n      }\n      property { key type format }\n    }\n  }}\n      success\n    }\n    ... on Error {\n      errorMessage\n      errorCode\n    }\n  }\n}\n",
										"variables": "{\n    \"familyName\": \"Bloggs\",\n    \"givenName\": \"Joe\",\n    \"primaryEmail\": \"joe@gmail.com\",\n    \"appData\": \"{  \\\"title\\\": \\\"Blogger\\\",  \\\"birthday\\\": \\\"04/21/1959\\\"}\",\n    \"sococoAppId\": \"{{sococoAppId}}\"\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "7. Create Jane Bloggs",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation CreatePerson($sococoAppId: ID!, $appData: AWSJSON, $familyName: String!, $givenName: String!, $primaryEmail: AWSEmail!) {\n  createPerson(input: {appData: $appData, callingAppId: $sococoAppId, familyName: $familyName, givenName: $givenName, primaryEmail: $primaryEmail}) {\n    __typename\n    ... on ChangePersonPayload {\n      person { id data {\n    ... on AppData {\n      __typename\n      app {\n        id\n        metadata {\n          properties {\n            format\n            key\n            type\n          }\n          required\n          schema\n          searchable\n          suggestible\n        }\n        name\n      }\n      data {\n        key value\n      }\n    }\n    ... on OrgData {\n      __typename\n      org {\n        id\n        metadata {\n          properties {\n            format\n            key\n            type\n          }\n          required\n          schema\n          searchable\n          suggestible\n        }\n        name\n      }\n      data {\n        key value\n      }\n    }\n  }\n  privacy {\n    public {\n      origin {\n        __typename\n        id\n        metadata {\n          properties {\n            format\n            key\n            type\n          }\n          required\n          schema\n          searchable\n          suggestible\n        }\n        name\n      }\n      property { key type format }\n    }\n  }\n  sharing {\n    permittedOrigin {\n      __typename\n      id\n      metadata {\n        properties {\n          format\n          key\n          type\n        }\n        required\n        schema\n        searchable\n        suggestible\n      }\n      name\n    }\n    read {\n      origin {\n        __typename\n        id\n        metadata {\n          properties {\n            format\n            key\n            type\n          }\n          required\n          schema\n          searchable\n          suggestible\n        }\n        name\n      }\n      property { key type format }\n    }\n    write {\n      origin {\n        __typename\n        id\n        metadata {\n          properties {\n            format\n            key\n            type\n          }\n          required\n          schema\n          searchable\n          suggestible\n        }\n        name\n      }\n      property { key type format }\n    }\n  }}\n      success\n    }\n    ... on Error {\n      errorMessage\n      errorCode\n    }\n  }\n}\n",
										"variables": "{\n    \"familyName\": \"Bloggs\",\n    \"givenName\": \"Jane\",\n    \"primaryEmail\": \"jane@gmail.com\",\n    \"appData\": \"{  \\\"title\\\": \\\"Blogger\\\",  \\\"birthday\\\": \\\"04/21/1959\\\"}\",\n    \"sococoAppId\": \"{{sococoAppId}}\"\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "8. Add Joe Bloggs to AnOrg",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation CreateOrgData ($input: CreateOrgDataInput!) {\n  createOrgData (input: $input) {\n  __typename\n  ...on ChangeOrgDataPayload {\n    success\n  }\n  ...on Error { errorCode errorMessage }\n}\n}",
										"variables": "{\n    \"input\": {\n            \"callingAppId\": \"{{sococoAppId}}\",\n            \"personId\": \"{{m5OrgJoeId}}\",\n            \"callingOrgId\": \"{{m5AnOrgId}}\",\n            \"orgData\": \"{\\r\\n  \\\"role\\\": \\\"Dynamic Branding Analyst\\\",\\r\\n  \\\"organization email\\\": \\\"the-dynamic@example.com\\\"\\r\\n}\\r\\n\"\n          }\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "9. Add Jane Bloggs to AnOrg",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation CreateOrgData ($input: CreateOrgDataInput!) {\n  createOrgData (input: $input) {\n  __typename\n  ...on ChangeOrgDataPayload {\n    success\n  }\n  ...on Error { errorCode errorMessage }\n}\n}",
										"variables": "{\n    \"input\": {\n            \"callingAppId\": \"{{sococoAppId}}\",\n            \"personId\": \"{{m5OrgJaneId}}\",\n            \"callingOrgId\": \"{{m5AnOrgId}}\",\n            \"orgData\": \"{\\r\\n  \\\"role\\\": \\\"Dynamic Branding Analyst\\\",\\r\\n  \\\"organization email\\\": \\\"the-dynamic@example.com\\\"\\r\\n}\\r\\n\"\n          }\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "10. Add Joe Bloggs to OtherOrg",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation CreateOrgData ($input: CreateOrgDataInput!) {\n  createOrgData (input: $input) {\n  __typename\n  ...on ChangeOrgDataPayload {\n    success\n  }\n  ...on Error { errorCode errorMessage }\n}\n}",
										"variables": "{\n    \"input\": {\n            \"callingAppId\": \"{{sococoAppId}}\",\n            \"personId\": \"{{m5OrgJoeId}}\",\n            \"callingOrgId\": \"{{m5OtherOrgId}}\",\n            \"orgData\": \"{\\r\\n  \\\"class\\\": \\\"Class D\\\",\\r\\n  \\\"organization phone\\\": \\\"(555) 123-4567\\\"\\r\\n}\\r\\n\"\n          }\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Search against a public field (both users are members)",
					"item": [
						{
							"name": "Make Joe role shared with AnOrg",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation SetCase5($personId: ID!, $callingAppId: ID!, $callingOrgId: ID!) {\n    updateOrgPrivacy(input: {\n        callingAppId: $callingAppId, \n        callingOrgId: $callingOrgId, \n        personId: $personId, \n        publicFields: []}) {\n    __typename\n    ... on ChangePersonPayload {\n      success\n    }\n    ... on Error {\n      errorMessage\n      errorCode\n    }\n  }\n  updateOrgSharing(input: {\n        callingAppId: $callingAppId,\n        callingOrgId: $callingOrgId,\n        personId: $personId, \n        sharing: [{\n            permittedOrgId: $callingOrgId, \n            read: [{orgId: $callingOrgId, key: \"role\"}]\n            write: []\n        }]}) {\n    __typename\n    ... on ChangePersonPayload {\n        success\n    }\n    ... on Error {\n      errorMessage\n      errorCode\n    }\n  }\n}\n",
										"variables": "{\n    \"callingAppId\": \"{{sococoAppId}}\",\n    \"callingOrgId\": \"{{m5AnOrgId}}\",\n    \"personId\": \"{{m5OrgJoeId}}\",\n    \"directoryServiceAppId\": \"{{directoryServiceAppId}}\"\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Joe searches for role (public field)",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query FindPeople($callingAppId: ID!, $callingOrgId: ID!, $personId: ID!, $searchTerm: String!) {\n  findPeople(callingAppId: $callingAppId,callingOrgId: $callingOrgId, callingPersonId: $personId, searchTerm: $searchTerm) {\n    result {\n        id\n        data {\n            __typename\n            ... on AppData {\n                app {\n                    id\n                    name\n                }\n                data {\n                    key\n                    value\n                }\n            }\n            ... on OrgData {\n                org {\n                    id\n                    name\n                }\n                data {\n                    key\n                    value\n                }\n            }\n        }\n    }\n  }\n}",
										"variables": "{\n    \"callingAppId\": \"{{sococoAppId}}\",\n    \"callingOrgId\": \"{{m5AnOrgId}}\",\n    \"personId\": \"{{m5OrgJoeId}}\",\n    \"searchTerm\": \"dynamic\"\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Jane searches for role (public field)",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query FindPeople($callingAppId: ID!, $callingOrgId: ID!, $personId: ID!, $searchTerm: String!) {\n  findPeople(callingAppId: $callingAppId,callingOrgId: $callingOrgId, callingPersonId: $personId, searchTerm: $searchTerm) {\n    result {\n        id\n        data {\n            __typename\n            ... on AppData {\n                app {\n                    id\n                    name\n                }\n                data {\n                    key\n                    value\n                }\n            }\n            ... on OrgData {\n                org {\n                    id\n                    name\n                }\n                data {\n                    key\n                    value\n                }\n            }\n        }\n    }\n  }\n}",
										"variables": "{\n    \"callingAppId\": \"{{sococoAppId}}\",\n    \"callingOrgId\": \"{{m5AnOrgId}}\",\n    \"personId\": \"{{m5OrgJaneId}}\",\n    \"searchTerm\": \"Analyst\"\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Search against a shared non-public field (only 1 user is member)",
					"item": [
						{
							"name": "Make Joe class shared with OtherOrg",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation SetCase5($personId: ID!, $callingAppId: ID!, $callingOrgId: ID!) {\n    updateOrgPrivacy(input: {\n        callingAppId: $callingAppId, \n        callingOrgId: $callingOrgId, \n        personId: $personId, \n        publicFields: []}) {\n    __typename\n    ... on ChangePersonPayload {\n      success\n    }\n    ... on Error {\n      errorMessage\n      errorCode\n    }\n  }\n  updateOrgSharing(input: {\n        callingAppId: $callingAppId,\n        callingOrgId: $callingOrgId,\n        personId: $personId, \n        sharing: [{\n            permittedOrgId: $callingOrgId, \n            read: [{orgId: $callingOrgId, key: \"class\"}]\n            write: []\n        }]}) {\n    __typename\n    ... on ChangePersonPayload {\n        success\n    }\n    ... on Error {\n      errorMessage\n      errorCode\n    }\n  }\n}\n",
										"variables": "{\n    \"callingAppId\": \"{{sococoAppId}}\",\n    \"callingOrgId\": \"{{m5OtherOrgId}}\",\n    \"personId\": \"{{m5OrgJoeId}}\"\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Joe searches for class",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query FindPeople($callingAppId: ID!, $callingOrgId: ID!, $personId: ID!, $searchTerm: String!) {\n  findPeople(callingAppId: $callingAppId,callingOrgId: $callingOrgId, callingPersonId: $personId, searchTerm: $searchTerm) {\n    result {\n        id\n        data {\n            __typename\n            ... on AppData {\n                app {\n                    id\n                    name\n                }\n                data {\n                    key\n                    value\n                }\n            }\n            ... on OrgData {\n                org {\n                    id\n                    name\n                }\n                data {\n                    key\n                    value\n                }\n            }\n        }\n    }\n  }\n}",
										"variables": "{\n    \"callingAppId\": \"{{sococoAppId}}\",\n    \"callingOrgId\": \"{{m5OtherOrgId}}\",\n    \"personId\": \"{{m5OrgJoeId}}\",\n    \"searchTerm\": \"Class D\"\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Jane searches for class",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query FindPeople($callingAppId: ID!, $callingOrgId: ID!, $personId: ID!, $searchTerm: String!) {\n  findPeople(callingAppId: $callingAppId,callingOrgId: $callingOrgId, callingPersonId: $personId, searchTerm: $searchTerm) {\n    result {\n        id\n        data {\n            __typename\n            ... on AppData {\n                app {\n                    id\n                    name\n                }\n                data {\n                    key\n                    value\n                }\n            }\n            ... on OrgData {\n                org {\n                    id\n                    name\n                }\n                data {\n                    key\n                    value\n                }\n            }\n        }\n    }\n  }\n}",
										"variables": "{\n    \"callingAppId\": \"{{sococoAppId}}\",\n    \"callingOrgId\": \"{{m5AnOrgId}}\",\n    \"personId\": \"{{m5OrgJaneId}}\",\n    \"searchTerm\": \"Class D\"\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "M5 - Person Search - Group",
			"item": [
				{
					"name": "Setup",
					"item": [
						{
							"name": "1. Create Sococo App",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let responseData=pm.response.json();\r",
											"pm.collectionVariables.set(\"sococoAppId\", responseData.data.createApp.app.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation CreateSococoApp($appName: String!, $appMetadata: AWSJSON!) {\n    createApp(input: {callingAppId: \"{{directoryServiceAppId}}\", metadata: $appMetadata, name: $appName}) {\n    ... on ChangeAppPayload {\n      __typename\n      success\n      app {\n        id\n        metadata {\n          suggestible\n          searchable\n          schema\n          required\n          properties {\n            format\n            key\n            type\n          }\n        }\n        name\n      }\n    }\n    ... on InvalidAppConfig {\n      errorMessage\n      errorCode\n    }\n    ... on AppNotFound {\n      errorMessage\n      errorCode\n    }\n  }\n}\n",
										"variables": "{\n    \"appName\": \"Sococo8\",\n    \"appMetadata\": \"{{sococoAppConfig}}\"\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. Create AnOrg",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let responseData=pm.response.json();\r",
											"pm.collectionVariables.set(\"m5AnOrgId\", responseData.data.createOrg.org.id);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation CreateOrg ($input: CreateOrgInput!) {\n  createOrg (input: $input) {\n  __typename\n  ...on ChangeOrgPayload {\n    success\n    org {\n      id name\n      metadata {\n        schema searchable suggestible required\n        properties {\n          key format type\n        }\n      }\n    }\n  }\n  ...on Error { errorCode errorMessage }\n}\n}",
										"variables": "{\n    \"input\": {\n            \"callingAppId\": \"{{directoryServiceAppId}}\",\n            \"name\": \"AnOrg\",\n            \"metadata\": \"{\\r\\n  \\\"$schema\\\": \\\"https:\\/\\/schemas.sococo5k.com\\/app-schema-01.json\\\",\\r\\n  \\\"properties\\\": {\\r\\n    \\\"organization email\\\": {\\r\\n      \\\"type\\\": \\\"string\\\",\\r\\n      \\\"format\\\": \\\"email\\\"\\r\\n    },\\r\\n    \\\"role\\\": {\\r\\n      \\\"type\\\": \\\"string\\\"\\r\\n    }\\r\\n  },\\r\\n  \\\"searchable\\\": [\\\"organization email\\\",\\\"role\\\"],\\r\\n  \\\"suggestible\\\": [\\\"role\\\"],\\r\\n  \\\"required\\\": [\\\"role\\\"]\\r\\n}\\r\\n\"\n          }\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "3. Add AnOrg to Sococo App",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation AddOrgToApp ($input: AddOrgToAppInput!) {\n  addOrgToApp (input: $input) {\n  __typename\n  ...on ChangeHierarchyPayload {\n    success\n  }\n  ...on Error { errorCode errorMessage }\n}\n}",
										"variables": "{\n    \"input\": {\n            \"callingAppId\": \"{{sococoAppId}}\",\n            \"callingOrgId\": \"{{m5AnOrgId}}\"\n          }\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "4. Create Group1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let responseData=pm.response.json();\r",
											"pm.collectionVariables.set(\"m5GroupId\", responseData.data.createGroup.group.id);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation CreateGroup ($input: CreateGroupInput!) {\r\n  createGroup(input: $input) {\r\n    ... on ChangeGroupPayload {\r\n      __typename\r\n      success\r\n      group {\r\n        id\r\n        name\r\n      }\r\n    }\r\n    ... on Error {\r\n      errorCode\r\n      errorMessage\r\n    }\r\n  }\r\n}",
										"variables": "{\r\n    \"input\": {\r\n        \"callingAppId\": \"{{sococoAppId}}\",\r\n        \"callingOrgId\": \"{{m5AnOrgId}}\",\r\n        \"name\": \"AGroup\"\r\n    }\r\n}\r\n"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "5. Create Group2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let responseData=pm.response.json();\r",
											"pm.collectionVariables.set(\"m5Group2Id\", responseData.data.createGroup.group.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation CreateGroup ($input: CreateGroupInput!) {\r\n  createGroup(input: $input) {\r\n    ... on ChangeGroupPayload {\r\n      __typename\r\n      success\r\n      group {\r\n        id\r\n        name\r\n      }\r\n    }\r\n    ... on Error {\r\n      errorCode\r\n      errorMessage\r\n    }\r\n  }\r\n}",
										"variables": "{\r\n    \"input\": {\r\n        \"callingAppId\": \"{{sococoAppId}}\",\r\n        \"callingOrgId\": \"{{m5AnOrgId}}\",\r\n        \"name\": \"AGroup2\"\r\n    }\r\n}\r\n"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "6. Create Joe Bloggs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let responseData=pm.response.json();\r",
											"pm.collectionVariables.set(\"m5JoeId\", responseData.data.createPerson.person.id);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation CreatePerson($sococoAppId: ID!, $appData: AWSJSON, $familyName: String!, $givenName: String!, $primaryEmail: AWSEmail!) {\n  createPerson(input: {appData: $appData, callingAppId: $sococoAppId, familyName: $familyName, givenName: $givenName, primaryEmail: $primaryEmail}) {\n    __typename\n    ... on ChangePersonPayload {\n      person { id data {\n    ... on AppData {\n      __typename\n      app {\n        id\n        metadata {\n          properties {\n            format\n            key\n            type\n          }\n          required\n          schema\n          searchable\n          suggestible\n        }\n        name\n      }\n      data {\n        key value\n      }\n    }\n    ... on OrgData {\n      __typename\n      org {\n        id\n        metadata {\n          properties {\n            format\n            key\n            type\n          }\n          required\n          schema\n          searchable\n          suggestible\n        }\n        name\n      }\n      data {\n        key value\n      }\n    }\n  }\n  privacy {\n    public {\n      origin {\n        __typename\n        id\n        metadata {\n          properties {\n            format\n            key\n            type\n          }\n          required\n          schema\n          searchable\n          suggestible\n        }\n        name\n      }\n      property { key type format }\n    }\n  }\n  sharing {\n    permittedOrigin {\n      __typename\n      id\n      metadata {\n        properties {\n          format\n          key\n          type\n        }\n        required\n        schema\n        searchable\n        suggestible\n      }\n      name\n    }\n    read {\n      origin {\n        __typename\n        id\n        metadata {\n          properties {\n            format\n            key\n            type\n          }\n          required\n          schema\n          searchable\n          suggestible\n        }\n        name\n      }\n      property { key type format }\n    }\n    write {\n      origin {\n        __typename\n        id\n        metadata {\n          properties {\n            format\n            key\n            type\n          }\n          required\n          schema\n          searchable\n          suggestible\n        }\n        name\n      }\n      property { key type format }\n    }\n  }}\n      success\n    }\n    ... on Error {\n      errorMessage\n      errorCode\n    }\n  }\n}\n",
										"variables": "{\n    \"familyName\": \"Bloggs\",\n    \"givenName\": \"Joe\",\n    \"primaryEmail\": \"joe@gmail.com\",\n    \"appData\": \"{  \\\"title\\\": \\\"Blogger\\\",  \\\"birthday\\\": \\\"04/21/1959\\\"}\",\n    \"sococoAppId\": \"{{sococoAppId}}\"\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "7. Create Jane Bloggs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let responseData=pm.response.json();\r",
											"pm.collectionVariables.set(\"m5JaneId\", responseData.data.createPerson.person.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation CreatePerson($sococoAppId: ID!, $appData: AWSJSON, $familyName: String!, $givenName: String!, $primaryEmail: AWSEmail!) {\n  createPerson(input: {appData: $appData, callingAppId: $sococoAppId, familyName: $familyName, givenName: $givenName, primaryEmail: $primaryEmail}) {\n    __typename\n    ... on ChangePersonPayload {\n      person { id data {\n    ... on AppData {\n      __typename\n      app {\n        id\n        metadata {\n          properties {\n            format\n            key\n            type\n          }\n          required\n          schema\n          searchable\n          suggestible\n        }\n        name\n      }\n      data {\n        key value\n      }\n    }\n    ... on OrgData {\n      __typename\n      org {\n        id\n        metadata {\n          properties {\n            format\n            key\n            type\n          }\n          required\n          schema\n          searchable\n          suggestible\n        }\n        name\n      }\n      data {\n        key value\n      }\n    }\n  }\n  privacy {\n    public {\n      origin {\n        __typename\n        id\n        metadata {\n          properties {\n            format\n            key\n            type\n          }\n          required\n          schema\n          searchable\n          suggestible\n        }\n        name\n      }\n      property { key type format }\n    }\n  }\n  sharing {\n    permittedOrigin {\n      __typename\n      id\n      metadata {\n        properties {\n          format\n          key\n          type\n        }\n        required\n        schema\n        searchable\n        suggestible\n      }\n      name\n    }\n    read {\n      origin {\n        __typename\n        id\n        metadata {\n          properties {\n            format\n            key\n            type\n          }\n          required\n          schema\n          searchable\n          suggestible\n        }\n        name\n      }\n      property { key type format }\n    }\n    write {\n      origin {\n        __typename\n        id\n        metadata {\n          properties {\n            format\n            key\n            type\n          }\n          required\n          schema\n          searchable\n          suggestible\n        }\n        name\n      }\n      property { key type format }\n    }\n  }}\n      success\n    }\n    ... on Error {\n      errorMessage\n      errorCode\n    }\n  }\n}\n",
										"variables": "{\n    \"familyName\": \"Bloggs\",\n    \"givenName\": \"Jane\",\n    \"primaryEmail\": \"jane@gmail.com\",\n    \"appData\": \"{  \\\"title\\\": \\\"Blogger\\\",  \\\"birthday\\\": \\\"04/21/1959\\\"}\",\n    \"sococoAppId\": \"{{sococoAppId}}\"\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "8. Add Joe Bloggs to AnOrg",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation CreateOrgData ($input: CreateOrgDataInput!) {\n  createOrgData (input: $input) {\n  __typename\n  ...on ChangeOrgDataPayload {\n    success\n  }\n  ...on Error { errorCode errorMessage }\n}\n}",
										"variables": "{\n    \"input\": {\n            \"callingAppId\": \"{{sococoAppId}}\",\n            \"personId\": \"{{m5JoeId}}\",\n            \"callingOrgId\": \"{{m5AnOrgId}}\",\n            \"orgData\": \"{\\r\\n  \\\"role\\\": \\\"Dynamic Branding Analyst\\\",\\r\\n  \\\"organization email\\\": \\\"the-dynamic@example.com\\\"\\r\\n}\\r\\n\"\n          }\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "9. Add Jane Bloggs to AnOrg",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation CreateOrgData ($input: CreateOrgDataInput!) {\n  createOrgData (input: $input) {\n  __typename\n  ...on ChangeOrgDataPayload {\n    success\n  }\n  ...on Error { errorCode errorMessage }\n}\n}",
										"variables": "{\n    \"input\": {\n            \"callingAppId\": \"{{sococoAppId}}\",\n            \"personId\": \"{{m5JaneId}}\",\n            \"callingOrgId\": \"{{m5AnOrgId}}\",\n            \"orgData\": \"{\\r\\n  \\\"role\\\": \\\"Software Analyst\\\",\\r\\n  \\\"organization email\\\": \\\"the-dynamic@example.com\\\"\\r\\n}\\r\\n\"\n          }\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "10. Add Joe Bloggs to Group1",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation AddPersonToGroup ($input: AddPersonToGroupInput!) {\n  addPersonToGroup(input: $input) {\n    ... on ChangeHierarchyPayload {\n      __typename\n      success\n    }\n    ... on Error {\n      errorCode\n      errorMessage\n    }\n  }\n}",
										"variables": "{\n    \"input\": {\n        \"callingAppId\": \"{{sococoAppId}}\", \n        \"callingGroupId\": \"{{m5GroupId}}\", \n        \"targetPersonId\": \"{{m5JoeId}}\"\n    }\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "11. Add Jane Bloggs to Group1",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation AddPersonToGroup ($input: AddPersonToGroupInput!) {\n  addPersonToGroup(input: $input) {\n    ... on ChangeHierarchyPayload {\n      __typename\n      success\n    }\n    ... on Error {\n      errorCode\n      errorMessage\n    }\n  }\n}",
										"variables": "{\n    \"input\": {\n        \"callingAppId\": \"{{sococoAppId}}\", \n        \"callingGroupId\": \"{{m5GroupId}}\", \n        \"targetPersonId\": \"{{m5JaneId}}\"\n    }\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "12. Add Jane Bloggs to Group2",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation AddPersonToGroup ($input: AddPersonToGroupInput!) {\n  addPersonToGroup(input: $input) {\n    ... on ChangeHierarchyPayload {\n      __typename\n      success\n    }\n    ... on Error {\n      errorCode\n      errorMessage\n    }\n  }\n}",
										"variables": "{\n    \"input\": {\n        \"callingAppId\": \"{{sococoAppId}}\", \n        \"callingGroupId\": \"{{m5Group2Id}}\", \n        \"targetPersonId\": \"{{m5JaneId}}\"\n    }\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "13. Create Group3 in Example Org",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let responseData=pm.response.json();\r",
											"pm.collectionVariables.set(\"m5Group3Id\", responseData.data.createGroup.group.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation CreateGroup ($input: CreateGroupInput!) {\r\n  createGroup(input: $input) {\r\n    ... on ChangeGroupPayload {\r\n      __typename\r\n      success\r\n      group {\r\n        id\r\n        name\r\n      }\r\n    }\r\n    ... on Error {\r\n      errorCode\r\n      errorMessage\r\n    }\r\n  }\r\n}",
										"variables": "{\r\n    \"input\": {\r\n        \"callingAppId\": \"{{directoryServiceAppId}}\",\r\n        \"callingOrgId\": \"{{exampleOrgId}}\",\r\n        \"name\": \"Group3\"\r\n    }\r\n}\r\n"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "14. Create Group4 in Example Org",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let responseData=pm.response.json();\r",
											"pm.collectionVariables.set(\"m5Group4Id\", responseData.data.createGroup.group.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation CreateGroup ($input: CreateGroupInput!) {\r\n  createGroup(input: $input) {\r\n    ... on ChangeGroupPayload {\r\n      __typename\r\n      success\r\n      group {\r\n        id\r\n        name\r\n      }\r\n    }\r\n    ... on Error {\r\n      errorCode\r\n      errorMessage\r\n    }\r\n  }\r\n}",
										"variables": "{\r\n    \"input\": {\r\n        \"callingAppId\": \"{{directoryServiceAppId}}\",\r\n        \"callingOrgId\": \"{{exampleOrgId}}\",\r\n        \"name\": \"Group4\"\r\n    }\r\n}\r\n"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "15. Add Jane Bloggs to Example Org",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation CreateOrgData ($input: CreateOrgDataInput!) {\n  createOrgData (input: $input) {\n  __typename\n  ...on ChangeOrgDataPayload {\n    success\n  }\n  ...on Error { errorCode errorMessage }\n}\n}",
										"variables": "{\n    \"input\": {\n            \"callingAppId\": \"{{directoryServiceAppId}}\",\n            \"personId\": \"{{m5JaneId}}\",\n            \"callingOrgId\": \"{{exampleOrgId}}\",\n            \"orgData\": \"{\\r\\n  \\\"role\\\": \\\"Software Architect\\\",\\r\\n  \\\"organization email\\\": \\\"the-dynamic@example.com\\\"\\r\\n}\\r\\n\"\n          }\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "16. Add Jane Bloggs to Group3",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation AddPersonToGroup ($input: AddPersonToGroupInput!) {\n  addPersonToGroup(input: $input) {\n    ... on ChangeHierarchyPayload {\n      __typename\n      success\n    }\n    ... on Error {\n      errorCode\n      errorMessage\n    }\n  }\n}",
										"variables": "{\n    \"input\": {\n        \"callingAppId\": \"{{directoryServiceAppId}}\", \n        \"callingGroupId\": \"{{m5Group3Id}}\", \n        \"targetPersonId\": \"{{m5JaneId}}\"\n    }\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Filter by groups",
					"item": [
						{
							"name": "Make Joe role public",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation SetCase5($personId: ID!, $callingAppId: ID!, $callingOrgId: ID!) {\n    updateOrgPrivacy(input: {\n        callingAppId: $callingAppId, \n        callingOrgId: $callingOrgId, \n        personId: $personId, \n        publicFields: [{\n            orgId: $callingOrgId,\n            key: \"role\"\n        }]}) {\n    __typename\n    ... on ChangePersonPayload {\n      success\n    }\n    ... on Error {\n      errorMessage\n      errorCode\n    }\n  }\n}\n",
										"variables": "{\n    \"callingAppId\": \"{{sococoAppId}}\",\n    \"callingOrgId\": \"{{m5AnOrgId}}\",\n    \"personId\": \"{{m5JoeId}}\",\n    \"directoryServiceAppId\": \"{{directoryServiceAppId}}\"\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Make Jane role public",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation SetCase5($personId: ID!, $callingAppId: ID!, $callingOrgId: ID!) {\n    updateOrgPrivacy(input: {\n        callingAppId: $callingAppId, \n        callingOrgId: $callingOrgId, \n        personId: $personId, \n        publicFields: [{\n            orgId: $callingOrgId,\n            key: \"role\"\n        }]}) {\n    __typename\n    ... on ChangePersonPayload {\n      success\n    }\n    ... on Error {\n      errorMessage\n      errorCode\n    }\n  }\n}\n",
										"variables": "{\n    \"callingAppId\": \"{{sococoAppId}}\",\n    \"callingOrgId\": \"{{m5AnOrgId}}\",\n    \"personId\": \"{{m5JaneId}}\",\n    \"directoryServiceAppId\": \"{{directoryServiceAppId}}\"\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Jane searches for role (public field) in Group1",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query FindPeople($callingAppId: ID!, $groupIds: [ID!]!, $personId: ID!, $searchTerm: String!) {\n  findPeople(callingAppId: $callingAppId, groupIds: $groupIds, callingPersonId: $personId, searchTerm: $searchTerm) {\n    result {\n        id\n        data {\n            __typename\n            ... on AppData {\n                app {\n                    id\n                    name\n                }\n                data {\n                    key\n                    value\n                }\n            }\n            ... on OrgData {\n                org {\n                    id\n                    name\n                }\n                data {\n                    key\n                    value\n                }\n            }\n        }\n    }\n  }\n}",
										"variables": "{\n    \"callingAppId\": \"{{sococoAppId}}\",\n    \"groupIds\": [\"{{m5GroupId}}\"],\n    \"personId\": \"{{m5JaneId}}\",\n    \"searchTerm\": \"Analyst\"\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Jane searches for role (public field) in Group2",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query FindPeople($callingAppId: ID!, $groupIds: [ID!]!, $personId: ID!, $searchTerm: String!) {\n  findPeople(callingAppId: $callingAppId, groupIds: $groupIds, callingPersonId: $personId, searchTerm: $searchTerm) {\n    result {\n        id\n        data {\n            __typename\n            ... on AppData {\n                app {\n                    id\n                    name\n                }\n                data {\n                    key\n                    value\n                }\n            }\n            ... on OrgData {\n                org {\n                    id\n                    name\n                }\n                data {\n                    key\n                    value\n                }\n            }\n        }\n    }\n  }\n}",
										"variables": "{\n    \"callingAppId\": \"{{sococoAppId}}\",\n    \"groupIds\": [\"{{m5Group2Id}}\"],\n    \"personId\": \"{{m5JaneId}}\",\n    \"searchTerm\": \"Analyst\"\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Errors",
					"item": [
						{
							"name": "Only Groups in the Orgs the App is a member of are allowed to be used in the filter",
							"item": [
								{
									"name": "Jane searches in Group3 from Sococo App",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query FindPeople($callingAppId: ID!, $groupIds: [ID!]!, $personId: ID!, $searchTerm: String!) {\n  findPeople(callingAppId: $callingAppId, groupIds: $groupIds, callingPersonId: $personId, searchTerm: $searchTerm) {\n    result {\n        id\n        data {\n            __typename\n            ... on AppData {\n                app {\n                    id\n                    name\n                }\n                data {\n                    key\n                    value\n                }\n            }\n            ... on OrgData {\n                org {\n                    id\n                    name\n                }\n                data {\n                    key\n                    value\n                }\n            }\n        }\n    }\n  }\n}",
												"variables": "{\n    \"callingAppId\": \"{{sococoAppId}}\",\n    \"groupIds\": [\"{{m5Group3Id}}\"],\n    \"personId\": \"{{m5JaneId}}\",\n    \"searchTerm\": \"dynamic\"\n}"
											}
										},
										"url": {
											"raw": "{{apiEndpoint}}",
											"host": [
												"{{apiEndpoint}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Only Groups in the Orgs the Person is a member of are allowed to be used in the filter",
							"item": [
								{
									"name": "Jane searches in Group4 from Sococo App",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query FindPeople($callingAppId: ID!, $groupIds: [ID!]!, $personId: ID!, $searchTerm: String!) {\n  findPeople(callingAppId: $callingAppId, groupIds: $groupIds, callingPersonId: $personId, searchTerm: $searchTerm) {\n    result {\n        id\n        data {\n            __typename\n            ... on AppData {\n                app {\n                    id\n                    name\n                }\n                data {\n                    key\n                    value\n                }\n            }\n            ... on OrgData {\n                org {\n                    id\n                    name\n                }\n                data {\n                    key\n                    value\n                }\n            }\n        }\n    }\n  }\n}",
												"variables": "{\n    \"callingAppId\": \"{{sococoAppId}}\",\n    \"groupIds\": [\"{{m5Group4Id}}\"],\n    \"personId\": \"{{m5JaneId}}\",\n    \"searchTerm\": \"dynamic\"\n}"
											}
										},
										"url": {
											"raw": "{{apiEndpoint}}",
											"host": [
												"{{apiEndpoint}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "M6",
			"item": [
				{
					"name": "Delete 10 Apps",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation DeleteApp ($app1Id: ID!, $app2Id: ID!, $app3Id: ID!, $app4Id: ID!, $app5Id: ID!, $app6Id: ID!\n    $app7Id: ID!, $app8Id: ID!, $app9Id: ID!, $app10Id: ID!) {\n    delete1: deleteApp(input: {callingAppId: \"{{directoryServiceAppId}}\", targetAppId: $app1Id}) {\n    __typename\n    ... on ChangeAppPayload {\n      success\n      app {\n        id\n        metadata {\n          suggestible\n          searchable\n          schema\n          required\n          properties {\n            format\n            key\n            type\n          }\n        }\n        name\n      }\n    }\n    ... on Error {\n      errorMessage\n      errorCode\n    }\n  }\n  delete2: deleteApp(input: {callingAppId: \"{{directoryServiceAppId}}\", targetAppId: $app2Id}) {\n    __typename\n    ... on ChangeAppPayload {\n      success\n      app {\n        id\n        metadata {\n          suggestible\n          searchable\n          schema\n          required\n          properties {\n            format\n            key\n            type\n          }\n        }\n        name\n      }\n    }\n    ... on Error {\n      errorMessage\n      errorCode\n    }\n  }\n  delete3: deleteApp(input: {callingAppId: \"{{directoryServiceAppId}}\", targetAppId: $app3Id}) {\n    __typename\n    ... on ChangeAppPayload {\n      success\n      app {\n        id\n        metadata {\n          suggestible\n          searchable\n          schema\n          required\n          properties {\n            format\n            key\n            type\n          }\n        }\n        name\n      }\n    }\n    ... on Error {\n      errorMessage\n      errorCode\n    }\n  }\n  delete4: deleteApp(input: {callingAppId: \"{{directoryServiceAppId}}\", targetAppId: $app4Id}) {\n    __typename\n    ... on ChangeAppPayload {\n      success\n      app {\n        id\n        metadata {\n          suggestible\n          searchable\n          schema\n          required\n          properties {\n            format\n            key\n            type\n          }\n        }\n        name\n      }\n    }\n    ... on Error {\n      errorMessage\n      errorCode\n    }\n  }\n  delete5: deleteApp(input: {callingAppId: \"{{directoryServiceAppId}}\", targetAppId: $app5Id}) {\n    __typename\n    ... on ChangeAppPayload {\n      success\n      app {\n        id\n        metadata {\n          suggestible\n          searchable\n          schema\n          required\n          properties {\n            format\n            key\n            type\n          }\n        }\n        name\n      }\n    }\n    ... on Error {\n      errorMessage\n      errorCode\n    }\n  }\n  delete6: deleteApp(input: {callingAppId: \"{{directoryServiceAppId}}\", targetAppId: $app6Id}) {\n    __typename\n    ... on ChangeAppPayload {\n      success\n      app {\n        id\n        metadata {\n          suggestible\n          searchable\n          schema\n          required\n          properties {\n            format\n            key\n            type\n          }\n        }\n        name\n      }\n    }\n    ... on Error {\n      errorMessage\n      errorCode\n    }\n  }\n  delete7: deleteApp(input: {callingAppId: \"{{directoryServiceAppId}}\", targetAppId: $app7Id}) {\n    __typename\n    ... on ChangeAppPayload {\n      success\n      app {\n        id\n        metadata {\n          suggestible\n          searchable\n          schema\n          required\n          properties {\n            format\n            key\n            type\n          }\n        }\n        name\n      }\n    }\n    ... on Error {\n      errorMessage\n      errorCode\n    }\n  }\n  delete8: deleteApp(input: {callingAppId: \"{{directoryServiceAppId}}\", targetAppId: $app8Id}) {\n    __typename\n    ... on ChangeAppPayload {\n      success\n      app {\n        id\n        metadata {\n          suggestible\n          searchable\n          schema\n          required\n          properties {\n            format\n            key\n            type\n          }\n        }\n        name\n      }\n    }\n    ... on Error {\n      errorMessage\n      errorCode\n    }\n  }\n  delete9: deleteApp(input: {callingAppId: \"{{directoryServiceAppId}}\", targetAppId: $app9Id}) {\n    __typename\n    ... on ChangeAppPayload {\n      success\n      app {\n        id\n        metadata {\n          suggestible\n          searchable\n          schema\n          required\n          properties {\n            format\n            key\n            type\n          }\n        }\n        name\n      }\n    }\n    ... on Error {\n      errorMessage\n      errorCode\n    }\n  }\n  delete10: deleteApp(input: {callingAppId: \"{{directoryServiceAppId}}\", targetAppId: $app10Id}) {\n    __typename\n    ... on ChangeAppPayload {\n      success\n      app {\n        id\n        metadata {\n          suggestible\n          searchable\n          schema\n          required\n          properties {\n            format\n            key\n            type\n          }\n        }\n        name\n      }\n    }\n    ... on Error {\n      errorMessage\n      errorCode\n    }\n  }\n}\n",
								"variables": "{\n    \"app1Id\": \"01G7595A8JK3MX3R2K2VR36QXH\",\n    \"app2Id\": \"01G75959Q9SZ771BDCRS9WWZA9\",\n    \"app3Id\": \"01G7595AKNYV45E90KANB9TQ5N\",\n    \"app4Id\": \"01G6T5KVSGQ642TWGDTQ1TMKE5\",\n    \"app5Id\": \"01G6T5KWF1XH94ZZWDQ6WZZSG9\",\n    \"app6Id\": \"01G6TSFHZS1P7N9PWQ8T654EJ4\",\n    \"app7Id\": \"{{m4AppId}}\",\n    \"app8Id\": \"{{chessAppId}}\",\n    \"app9Id\": \"{{m4AppId}}\",\n    \"app10Id\": \"{{chessAppId}}\"\n}"
							}
						},
						"url": {
							"raw": "{{apiEndpoint}}",
							"host": [
								"{{apiEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Find people",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query FindPeople($callingAppId: ID!, $personId: ID!, $searchTerm: String!) {\n  findPeople(callingAppId: $callingAppId, callingPersonId: $personId, searchTerm: $searchTerm) {\n    result {\n        id\n        data {\n            __typename\n            ... on AppData {\n                app {\n                    id\n                    name\n                }\n                data {\n                    key\n                    value\n                }\n            }\n            ... on OrgData {\n                org {\n                    id\n                    name\n                }\n                data {\n                    key\n                    value\n                }\n            }\n        }\n    }\n  }\n}",
								"variables": "{\n    \"callingAppId\": \"{{directoryServiceAppId}}\",\n    \"personId\": \"{{examplePersonId}}\",\n    \"searchTerm\": \"Boliviano\"\n}"
							}
						},
						"url": {
							"raw": "{{apiEndpoint}}",
							"host": [
								"{{apiEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete 10 People",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation DeletePeople($person1: ID!, $person2: ID!, $person3: ID!, $person4: ID!, $person5: ID!, $person6: ID!, $person7: ID!, $person8: ID!, $person9: ID!, $person10: ID!) {\n  delete1: deletePerson(input: {callingAppId: \"{{directoryServiceAppId}}\", personId: $person1}) {__typename\n        ... on ChangePersonPayload {\n            person {\n                id\n                data {\n                    __typename\n                    ... on AppData {\n                        app {\n                            id\n                            name\n                        }\n                        data {\n                            key\n                            value\n                        }\n                    }\n                    ... on OrgData {\n                        org {\n                            id\n                            name\n                        }\n                        data {\n                            key\n                            value\n                        }\n                    }\n                }\n            }\n            success\n        }\n        ... on Error {\n            errorMessage\n            errorCode\n        }\n    }\n  delete2: deletePerson(input: {callingAppId: \"{{directoryServiceAppId}}\", personId: $person2}) {\n    __typename\n        ... on ChangePersonPayload {\n            person {\n                id\n                data {\n                    __typename\n                    ... on AppData {\n                        app {\n                            id\n                            name\n                        }\n                        data {\n                            key\n                            value\n                        }\n                    }\n                    ... on OrgData {\n                        org {\n                            id\n                            name\n                        }\n                        data {\n                            key\n                            value\n                        }\n                    }\n                }\n            }\n            success\n        }\n        ... on Error {\n            errorMessage\n            errorCode\n        }\n    }\n  delete3: deletePerson(input: {callingAppId: \"{{directoryServiceAppId}}\", personId: $person3}) {\n    __typename\n        ... on ChangePersonPayload {\n            person {\n                id\n                data {\n                    __typename\n                    ... on AppData {\n                        app {\n                            id\n                            name\n                        }\n                        data {\n                            key\n                            value\n                        }\n                    }\n                    ... on OrgData {\n                        org {\n                            id\n                            name\n                        }\n                        data {\n                            key\n                            value\n                        }\n                    }\n                }\n            }\n            success\n        }\n        ... on Error {\n            errorMessage\n            errorCode\n        }\n    }\n  delete4: deletePerson(input: {callingAppId: \"{{directoryServiceAppId}}\", personId: $person4}) {\n    __typename\n        ... on ChangePersonPayload {\n            person {\n                id\n                data {\n                    __typename\n                    ... on AppData {\n                        app {\n                            id\n                            name\n                        }\n                        data {\n                            key\n                            value\n                        }\n                    }\n                    ... on OrgData {\n                        org {\n                            id\n                            name\n                        }\n                        data {\n                            key\n                            value\n                        }\n                    }\n                }\n            }\n            success\n        }\n        ... on Error {\n            errorMessage\n            errorCode\n        }\n    }\n  delete5: deletePerson(input: {callingAppId: \"{{directoryServiceAppId}}\", personId: $person5}) {\n    __typename\n        ... on ChangePersonPayload {\n            person {\n                id\n                data {\n                    __typename\n                    ... on AppData {\n                        app {\n                            id\n                            name\n                        }\n                        data {\n                            key\n                            value\n                        }\n                    }\n                    ... on OrgData {\n                        org {\n                            id\n                            name\n                        }\n                        data {\n                            key\n                            value\n                        }\n                    }\n                }\n            }\n            success\n        }\n        ... on Error {\n            errorMessage\n            errorCode\n        }\n    }\n  delete6: deletePerson(input: {callingAppId: \"{{directoryServiceAppId}}\", personId: $person6}) {\n    __typename\n        ... on ChangePersonPayload {\n            person {\n                id\n                data {\n                    __typename\n                    ... on AppData {\n                        app {\n                            id\n                            name\n                        }\n                        data {\n                            key\n                            value\n                        }\n                    }\n                    ... on OrgData {\n                        org {\n                            id\n                            name\n                        }\n                        data {\n                            key\n                            value\n                        }\n                    }\n                }\n            }\n            success\n        }\n        ... on Error {\n            errorMessage\n            errorCode\n        }\n    }\n  delete7: deletePerson(input: {callingAppId: \"{{directoryServiceAppId}}\", personId: $person7}) {\n    __typename\n        ... on ChangePersonPayload {\n            person {\n                id\n                data {\n                    __typename\n                    ... on AppData {\n                        app {\n                            id\n                            name\n                        }\n                        data {\n                            key\n                            value\n                        }\n                    }\n                    ... on OrgData {\n                        org {\n                            id\n                            name\n                        }\n                        data {\n                            key\n                            value\n                        }\n                    }\n                }\n            }\n            success\n        }\n        ... on Error {\n            errorMessage\n            errorCode\n        }\n    }\n  delete8: deletePerson(input: {callingAppId: \"{{directoryServiceAppId}}\", personId: $person8}) {\n    __typename\n        ... on ChangePersonPayload {\n            person {\n                id\n                data {\n                    __typename\n                    ... on AppData {\n                        app {\n                            id\n                            name\n                        }\n                        data {\n                            key\n                            value\n                        }\n                    }\n                    ... on OrgData {\n                        org {\n                            id\n                            name\n                        }\n                        data {\n                            key\n                            value\n                        }\n                    }\n                }\n            }\n            success\n        }\n        ... on Error {\n            errorMessage\n            errorCode\n        }\n    }\n  delete9: deletePerson(input: {callingAppId: \"{{directoryServiceAppId}}\", personId: $person9}) {\n    __typename\n        ... on ChangePersonPayload {\n            person {\n                id\n                data {\n                    __typename\n                    ... on AppData {\n                        app {\n                            id\n                            name\n                        }\n                        data {\n                            key\n                            value\n                        }\n                    }\n                    ... on OrgData {\n                        org {\n                            id\n                            name\n                        }\n                        data {\n                            key\n                            value\n                        }\n                    }\n                }\n            }\n            success\n        }\n        ... on Error {\n            errorMessage\n            errorCode\n        }\n    }\n  delete10: deletePerson(input: {callingAppId: \"{{directoryServiceAppId}}\", personId: $person10}) {\n    __typename\n        ... on ChangePersonPayload {\n            person {\n                id\n                data {\n                    __typename\n                    ... on AppData {\n                        app {\n                            id\n                            name\n                        }\n                        data {\n                            key\n                            value\n                        }\n                    }\n                    ... on OrgData {\n                        org {\n                            id\n                            name\n                        }\n                        data {\n                            key\n                            value\n                        }\n                    }\n                }\n            }\n            success\n        }\n        ... on Error {\n            errorMessage\n            errorCode\n        }\n    }\n}\n",
								"variables": "{\n    \"person1\": \"01G75973ZRPCCGZ4MBGAYV982D\",\n    \"person2\": \"01G75972M1C7EQXWTVDZ1QZDSD\",\n    \"person3\": \"01G75972M1C7EQXWTVDZ1QZDSD\",\n    \"person4\": \"01G75971S5E0CM03MWX2HE2SCG\",\n    \"person5\": \"01G759711BS7G9WJ5Z82Y2VVB3\",\n    \"person6\": \"01G6TSHA7QPB1P1YFGDWG31HV0\",\n    \"person7\": \"01G6TSH8ZJSXPTYH37QH1HWPBF\",\n    \"person8\": \"01G6T7FMW96E29X2G3NNS3YC65\",\n    \"person9\": \"01G6T8FGDC4CYJ1G0ZJKHW5ESW\",\n    \"person10\": \"01G6T7FPA1JSG63S82YVT0541T\"\n}"
							}
						},
						"url": {
							"raw": "{{apiEndpoint}}",
							"host": [
								"{{apiEndpoint}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Groups and Orgs",
			"item": [
				{
					"name": "Create Org",
					"item": [
						{
							"name": "Create a new Org",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation CreateOrg ($input: CreateOrgInput!) {\n  createOrg (input: $input) {\n  __typename\n  ...on ChangeOrgPayload {\n    success\n    org {\n      id name\n      metadata {\n        schema searchable suggestible required\n        properties {\n          key format type\n        }\n      }\n    }\n  }\n  ...on Error { errorCode errorMessage }\n}\n}",
										"variables": "{\n    \"input\": {\n            \"callingAppId\": \"{{directoryServiceAppId}}\",\n            \"name\": \"Newly Created Org Again\",\n            \"metadata\": \"{\\r\\n  \\\"$schema\\\": \\\"https:\\/\\/schemas.sococo5k.com\\/app-schema-01.json\\\",\\r\\n  \\\"properties\\\": {\\r\\n    \\\"organization email\\\": {\\r\\n      \\\"type\\\": \\\"string\\\",\\r\\n      \\\"format\\\": \\\"email\\\"\\r\\n    },\\r\\n    \\\"role\\\": {\\r\\n      \\\"type\\\": \\\"string\\\"\\r\\n    }\\r\\n  },\\r\\n  \\\"searchable\\\": [\\\"organization email\\\",\\\"role\\\"],\\r\\n  \\\"suggestible\\\": [\\\"role\\\"],\\r\\n  \\\"required\\\": [\\\"role\\\"]\\r\\n}\\r\\n\"\n          }\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Another Org",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation CreateOrg ($input: CreateOrgInput!) {\n  createOrg (input: $input) {\n  __typename\n  ...on ChangeOrgPayload {\n    success\n    org {\n      id name\n      metadata {\n        schema searchable suggestible required\n        properties {\n          key format type\n        }\n      }\n    }\n  }\n  ...on Error { errorCode errorMessage }\n}\n}",
										"variables": "{\n    \"input\": {\n            \"callingAppId\": \"{{directoryServiceAppId}}\",\n            \"name\": \"Another Org\",\n            \"metadata\": \"{\\r\\n  \\\"$schema\\\": \\\"https:\\/\\/schemas.sococo5k.com\\/app-schema-01.json\\\",\\r\\n  \\\"properties\\\": {\\r\\n    \\\"organization email\\\": {\\r\\n      \\\"type\\\": \\\"string\\\",\\r\\n      \\\"format\\\": \\\"email\\\"\\r\\n    },\\r\\n    \\\"role\\\": {\\r\\n      \\\"type\\\": \\\"string\\\"\\r\\n    }\\r\\n  },\\r\\n  \\\"searchable\\\": [\\\"organization email\\\",\\\"role\\\"],\\r\\n  \\\"suggestible\\\": [\\\"role\\\"],\\r\\n  \\\"required\\\": [\\\"role\\\"]\\r\\n}\\r\\n\"\n          }\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Update Org",
					"item": [
						{
							"name": "Update an Org's name",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation UpdateOrg ($input: UpdateOrgNameInput!) {\nupdateOrgName (input: $input) {\n  __typename\n  ...on ChangeOrgPayload {\n    success\n    org {\n      id name\n      metadata {\n        schema searchable suggestible required\n        properties {\n          key format type\n        }\n      }\n    }\n  }\n  ...on Error { errorCode errorMessage }\n}\n}",
										"variables": "{\n    \"input\": {\n            \"callingAppId\": \"{{directoryServiceAppId}}\",\n            \"name\": \"New Name for the Created Org\",\n            \"targetOrgId\": \"{{targetOrgId}}\"\n          }\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update an Org's metadata",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation UpdateOrgMetadata ($input: UpdateOrgMetadataInput!) {\nupdateOrgMetadata (input: $input) {\n  __typename\n  ...on ChangeOrgPayload {\n    success\n    org {\n      id name\n      metadata {\n        schema searchable suggestible required\n        properties {\n          key format type\n        }\n      }\n    }\n  }\n  ...on Error { errorCode errorMessage }\n}\n}",
										"variables": "{\n    \"input\": {\n            \"callingAppId\": \"{{directoryServiceAppId}}\",\n            \"targetOrgId\": \"{{targetOrgId}}\",\n            \"metadata\": \"{\\r\\n  \\\"$schema\\\": \\\"https:\\/\\/schemas.sococo5k.com\\/app-schema-01.json\\\",\\r\\n  \\\"properties\\\": {\\r\\n    \\\"organization email\\\": {\\r\\n      \\\"type\\\": \\\"string\\\",\\r\\n      \\\"format\\\": \\\"email\\\"\\r\\n    },\\r\\n    \\\"role\\\": {\\r\\n      \\\"type\\\": \\\"string\\\"\\r\\n    },\\r\\n    \\\"class\\\": {\\r\\n      \\\"type\\\": \\\"string\\\"\\r\\n    }\\r\\n  },\\r\\n  \\\"searchable\\\": [\\\"organization email\\\",\\\"role\\\",\\\"class\\\"],\\r\\n  \\\"suggestible\\\": [\\\"role\\\"],\\r\\n  \\\"required\\\": [\\\"role\\\",\\\"class\\\"]\\r\\n}\\r\\n\"\n          }\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete Org",
					"item": [
						{
							"name": "Delete Org",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation DeleteOrg ($input: DeleteOrgInput!) {\n  deleteOrg (input: $input) {\n  __typename\n  ...on ChangeOrgPayload {\n    success\n    org {\n      id name\n      metadata {\n        schema searchable suggestible required\n        properties {\n          key format type\n        }\n      }\n    }\n  }\n  ...on Error { errorCode errorMessage }\n}\n}",
										"variables": "{\n    \"input\": {\n            \"callingAppId\": \"{{directoryServiceAppId}}\",\n            \"targetOrgId\": \"{{targetOrgId}}\"\n          }\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Query Org",
					"item": [
						{
							"name": "Get One Org",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query GetOrgById ($callingAppId: ID!, $orgId: ID!) {\n    getOrgById (callingAppId: $callingAppId, orgId: $orgId) {\n  id name\n  metadata {\n    properties {\n      key format type\n    }\n    schema searchable suggestible required\n  }\n}\n}",
										"variables": "{\n    \n            \"callingAppId\": \"{{sococoAppId}}\",\n            \"orgId\": \"{{targetOrgId}}\"\n    \n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "List Orgs",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query ListOrgs ($callingAppId: ID!) {\n    listOrgs (callingAppId: $callingAppId) {\n  id name\n  metadata {\n    properties {\n      key format type\n    }\n    schema searchable suggestible required\n  }\n}\n}",
										"variables": "{\n\n            \"callingAppId\": \"{{directoryServiceAppId}}\"\n\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Make an Org member of an App",
					"item": [
						{
							"name": "Add Org to Sococo App",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation AddOrgToApp ($input: AddOrgToAppInput!) {\n  addOrgToApp (input: $input) {\n  __typename\n  ...on ChangeHierarchyPayload {\n    success\n  }\n  ...on Error { errorCode errorMessage }\n}\n}",
										"variables": "{\n    \"input\": {\n            \"callingAppId\": \"{{sococoAppId}}\",\n            \"callingOrgId\": \"{{targetOrgId}}\"\n          }\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Another Org to Sococo App",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation AddOrgToApp ($input: AddOrgToAppInput!) {\n  addOrgToApp (input: $input) {\n  __typename\n  ...on ChangeHierarchyPayload {\n    success\n  }\n  ...on Error { errorCode errorMessage }\n}\n}",
										"variables": "{\n    \"input\": {\n            \"callingAppId\": \"{{sococoAppId}}\",\n            \"callingOrgId\": \"{{anotherOrgId}}\"\n          }\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Add Person to Org",
					"item": [
						{
							"name": "Add Sococo Person to Org",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation CreateOrgData ($input: CreateOrgDataInput!) {\n  createOrgData (input: $input) {\n  __typename\n  ...on ChangeOrgDataPayload {\n    success\n  }\n  ...on Error { errorCode errorMessage }\n}\n}",
										"variables": "{\n    \"input\": {\n            \"callingAppId\": \"{{sococoAppId}}\",\n            \"personId\": \"{{sococoPersonId}}\",\n            \"callingOrgId\": \"{{targetOrgId}}\",\n            \"orgData\": \"{\\r\\n  \\\"role\\\": \\\"Dynamic Branding Analyst\\\",\\r\\n  \\\"organization email\\\": \\\"the-dynamic@example.com\\\"\\r\\n}\\r\\n\"\n          }\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Sococo Person to Another Org",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation CreateOrgData ($input: CreateOrgDataInput!) {\n  createOrgData (input: $input) {\n  __typename\n  ...on ChangeOrgDataPayload {\n    success\n  }\n  ...on Error { errorCode errorMessage }\n}\n}",
										"variables": "{\n    \"input\": {\n            \"callingAppId\": \"{{sococoAppId}}\",\n            \"personId\": \"{{sococoPersonId}}\",\n            \"callingOrgId\": \"{{anotherOrgId}}\",\n            \"orgData\": \"{\\r\\n  \\\"role\\\": \\\"Dynamic Branding Analyst\\\",\\r\\n  \\\"organization email\\\": \\\"the-dynamic@example.com\\\"\\r\\n}\\r\\n\"\n          }\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Sococo Person to Org (extended org metadata)",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation CreateOrgData ($input: CreateOrgDataInput!) {\n  createOrgData (input: $input) {\n  __typename\n  ...on ChangeOrgDataPayload {\n    success\n  }\n  ...on Error { errorCode errorMessage }\n}\n}",
										"variables": "{\n    \"input\": {\n            \"callingAppId\": \"{{sococoAppId}}\",\n            \"personId\": \"{{sococoPersonId}}\",\n            \"targetOrgId\": \"{{targetOrgId}}\",\n            \"orgData\": \"{\\r\\n  \\\"role\\\": \\\"Dynamic Branding Analyst\\\",\\r\\n  \\\"organization email\\\": \\\"the-dynamic@example.com\\\",\\r\\n  \\\"class\\\": \\\"9th\\\"\\r\\n}\"\n          }\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Update a Person's Org Data",
					"item": [
						{
							"name": "Update Sococo Person to Org (outdated)",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation UpdateOrgData ($input: UpdateOrgDataInput!) {\n  updateOrgData (input: $input) {\n  __typename\n  ...on ChangeOrgDataPayload {\n    success\n  }\n  ...on Error { errorCode errorMessage }\n}\n}",
										"variables": "{\n    \"input\": {\n            \"callingAppId\": \"{{sococoAppId}}\",\n            \"personId\": \"{{sococoPersonId}}\",\n            \"targetOrgId\": \"{{targetOrgId}}\",\n            \"orgData\": \"{\\r\\n  \\\"role\\\": \\\"HR\\\",\\r\\n  \\\"organization email\\\": \\\"hr-main@example.com\\\"\\r\\n}\\r\\n\"\n          }\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Sococo Person to Org (updated)",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation UpdateOrgData ($input: UpdateOrgDataInput!) {\n  updateOrgData (input: $input) {\n  __typename\n  ...on ChangeOrgDataPayload {\n    success\n  }\n  ...on Error { errorCode errorMessage }\n}\n}",
										"variables": "{\n    \"input\": {\n            \"callingAppId\": \"{{sococoAppId}}\",\n            \"personId\": \"{{sococoPersonId}}\",\n            \"targetOrgId\": \"{{targetOrgId}}\",\n            \"orgData\": \"{\\r\\n  \\\"role\\\": \\\"HR\\\",\\r\\n  \\\"organization email\\\": \\\"hr-main@example.com\\\",\\r\\n  \\\"class\\\": \\\"6th\\\"\\r\\n}\\r\\n\"\n          }\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Remove Person from Org",
					"item": [
						{
							"name": "Remove Person from Org",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation DeleteOrgData ($input: DeleteOrgDataInput!) {\n  deleteOrgData (input: $input) {\n  __typename\n  ...on ChangeOrgDataPayload {\n    success\n  }\n  ...on Error { errorCode errorMessage }\n}\n}",
										"variables": "{\n    \"input\": {\n                    \"callingAppId\": \"{{sococoAppId}}\",\n            \"personId\": \"{{m5OrgJaneId}}\",\n            \"callingOrgId\": \"{{m5OtherOrgId}}\"\n          }\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Create Group",
					"item": [
						{
							"name": "Create Parent Group",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation CreateGroup ($input: CreateGroupInput!) {\n  createGroup (input: $input) {\n  __typename\n  ...on ChangeGroupPayload {\n    success\n    group {\n        name\n        id\n    }\n  }\n  ...on Error { errorCode errorMessage }\n}\n}",
										"variables": "{\n    \"input\": {\n            \"callingAppId\": \"{{sococoAppId}}\",\n            \"name\": \"Parent Group\",\n            \"callingOrgId\": \"{{targetOrgId}}\"\n          }\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Another Group",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation CreateGroup ($input: CreateGroupInput!) {\n  createGroup (input: $input) {\n  __typename\n  ...on ChangeGroupPayload {\n    success\n    group {\n        name\n        id\n    }\n  }\n  ...on Error { errorCode errorMessage }\n}\n}",
										"variables": "{\n    \"input\": {\n            \"callingAppId\": \"{{sococoAppId}}\",\n            \"name\": \"Another Group\",\n            \"callingOrgId\": \"{{anotherOrgId}}\"\n          }\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Child Group",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation CreateGroup ($input: CreateGroupInput!) {\n  createGroup (input: $input) {\n  __typename\n  ...on ChangeGroupPayload {\n    success\n    group {\n        name\n        id\n    }\n  }\n  ...on Error { errorCode errorMessage }\n}\n}",
										"variables": "{\n    \"input\": {\n            \"callingAppId\": \"{{sococoAppId}}\",\n            \"name\": \"Child Group\",\n            \"callingOrgId\": \"{{targetOrgId}}\"\n          }\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Update Group",
					"item": [
						{
							"name": "Update Groups's name",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation UpdateGroupName ($input: UpdateGroupNameInput!) {\n  updateGroupName (input: $input) {\n  __typename\n  ...on ChangeGroupPayload {\n    success\n    group {\n        name\n        id\n    }\n  }\n  ...on Error { errorCode errorMessage }\n}\n}",
										"variables": "{\n    \"input\": {\n            \"callingAppId\": \"{{sococoAppId}}\",\n            \"name\": \"The Parent Group\",\n            \"targetGroupId\": \"{{parentGroupId}}\"\n          }\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Child Group to Parent Group",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation AddGroupToGroup ($input: AddGroupToGroupInput!) {\n  addGroupToGroup (input: $input) {\n  __typename\n  ...on ChangeHierarchyPayload {\n    success\n  }\n  ...on Error { errorCode errorMessage }\n}\n}",
										"variables": "{\n    \"input\": {\n            \"callingAppId\": \"{{sococoAppId}}\",\n            \"callingGroupId\": \"{{parentGroupId}}\",\n            \"targetGroupId\": \"{{childGroupId}}\"\n          }\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Parent Group to Child Group",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation AddGroupToGroup ($input: AddGroupToGroupInput!) {\n  addGroupToGroup (input: $input) {\n  __typename\n  ...on ChangeHierarchyPayload {\n    success\n  }\n  ...on Error { errorCode errorMessage }\n}\n}",
										"variables": "{\n    \"input\": {\n            \"callingAppId\": \"{{sococoAppId}}\",\n            \"callingGroupId\": \"{{childGroupId}}\",\n            \"targetGroupId\": \"{{parentGroupId}}\"\n          }\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Another Group to Child Group",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation AddGroupToGroup ($input: AddGroupToGroupInput!) {\n  addGroupToGroup (input: $input) {\n  __typename\n  ...on ChangeHierarchyPayload {\n    success\n  }\n  ...on Error { errorCode errorMessage }\n}\n}",
										"variables": "{\n    \"input\": {\n            \"callingAppId\": \"{{sococoAppId}}\",\n            \"callingGroupId\": \"{{childGroupId}}\",\n            \"targetGroupId\": \"{{anotherGroupId}}\"\n          }\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete Group",
					"item": [
						{
							"name": "Remove Child Group",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation RemoveGroup ($input: DeleteGroupInput!) {\n  deleteGroup (input: $input) {\n  __typename\n  ...on ChangeGroupPayload {\n    success\n    group {\n        name\n        id\n    }\n  }\n  ...on Error { errorCode errorMessage }\n}\n}",
										"variables": "{\n    \"input\": {\n            \"callingAppId\": \"{{sococoAppId}}\",\n            \"targetGroupId\": \"{{childGroupId}}\"\n          }\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove Child Group from Parent Group",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation RemoveGroupFromGroup ($input: RemoveGroupFromGroupInput!) {\n  removeGroupFromGroup (input: $input) {\n  __typename\n  ...on ChangeHierarchyPayload {\n    success\n  }\n  ...on Error { errorCode errorMessage }\n}\n}",
										"variables": "{\n    \"input\": {\n            \"callingAppId\": \"{{sococoAppId}}\",\n            \"callingGroupId\": \"{{parentGroupId}}\",\n            \"targetGroupId\": \"{{childGroupId}}\"\n          }\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Query Group",
					"item": [
						{
							"name": "List Org's Groups",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query ListOrgGroups ($callingAppId: ID!, $targetOrg: ID!) {\n    getGroupsByOrgId (callingAppId: $callingAppId, orgId: $targetOrg) {\n  id name\n}\n}",
										"variables": "{\n\n            \"callingAppId\": \"{{directoryServiceAppId}}\",\n            \"targetOrg\": \"{{targetOrgId}}\"\n\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Add Person to Group",
					"item": [
						{
							"name": "Add Sococo Person to Group",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation AddPersonToGroup ($input: AddPersonToGroupInput!) {\n  addPersonToGroup (input: $input) {\n  __typename\n  ...on ChangeHierarchyPayload {\n    success\n  }\n  ...on Error { errorCode errorMessage }\n}\n}",
										"variables": "{\n   \"input\":{\n      \"callingAppId\":\"{{sococoAppId}}\",\n      \"targetPersonId\":\"{{sococoPersonId}}\",\n      \"callingGroupId\":\"{{childGroupId}}\"\n   }\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Remove Person from Group",
					"item": [
						{
							"name": "Remove Sococo Person to Group",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation RemovePersonToGroup ($input: RemovePersonFromGroupInput!) {\n  removePersonFromGroup (input: $input) {\n  __typename\n  ...on ChangeHierarchyPayload {\n    success\n  }\n  ...on Error { errorCode errorMessage }\n}\n}",
										"variables": "{\n   \"input\":{\n      \"callingAppId\":\"{{sococoAppId}}\",\n      \"targetPersonId\":\"{{sococoPersonId}}\",\n      \"callingGroupId\":\"{{childGroupId}}\"\n   }\n}"
									}
								},
								"url": {
									"raw": "{{apiEndpoint}}",
									"host": [
										"{{apiEndpoint}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "CleanUp",
			"item": [
				{
					"name": "Reset State",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation seedData {\r\n  seedData {\r\n    success\r\n  }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{apiEndpoint}}",
							"host": [
								"{{apiEndpoint}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "{{apiKey}}",
				"type": "string"
			},
			{
				"key": "key",
				"value": "x-api-key",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "callingAppId",
			"value": "00000000000000000000000001",
			"type": "string"
		},
		{
			"key": "directoryServiceAppId",
			"value": "00000000000000000000000000",
			"type": "string"
		},
		{
			"key": "exampleAppId",
			"value": "00000000000000000000000001",
			"type": "string"
		},
		{
			"key": "invalidAppConfigMissingSearchable",
			"value": "{\\\"$schema\\\": \\\"https://directory-service-schemas.s3.amazonaws.com/app-schema-01.json\\\",\\\"properties\\\": {\\\"birthday\\\": {\\\"type\\\": \\\"string\\\",\\\"format\\\": \\\"email\\\"    },    \\\"title\\\": {      \\\"type\\\": \\\"string\\\"    }  },  \\\"suggestible\\\": [\\\"title\\\"],  \\\"required\\\": [\\\"title\\\"]}",
			"type": "string"
		},
		{
			"key": "invalidAppConfigMissingSuggestible",
			"value": "{  \\\"$schema\\\": \\\"https://directory-service-schemas.s3.amazonaws.com/app-schema-01.json\\\",  \\\"properties\\\": {    \\\"birthday\\\": {        \\\"type\\\": \\\"string\\\",        \\\"format\\\": \\\"date\\\"    },    \\\"title\\\": {      \\\"type\\\": \\\"string\\\"    }  },  \\\"searchable\\\": [\\\"birthday\\\",\\\"title\\\"],  \\\"autocompletable\\\": [\\\"title\\\"]}",
			"type": "string"
		},
		{
			"key": "invalidAppConfigSearchable",
			"value": "{  \\\"$schema\\\": \\\"https://directory-service-schemas.s3.amazonaws.com/app-schema-01.json\\\",  \\\"properties\\\": {    \\\"birthday\\\": {      \\\"type\\\": \\\"string\\\",      \\\"format\\\": \\\"email\\\"    },    \\\"title\\\": {      \\\"type\\\": \\\"string\\\"    }  },  \\\"searchable\\\": [\\\"birthday\\\",\\\"title\\\",\\\"email\\\"],  \\\"suggestible\\\": [\\\"title\\\"],  \\\"required\\\": [\\\"title\\\"]}",
			"type": "string"
		},
		{
			"key": "invalidAppConfigMissingSearchableSuggestible",
			"value": "{  \\\"$schema\\\": \\\"https://directory-service-schemas.s3.amazonaws.com/app-schema-01.json\\\",  \\\"properties\\\": {    \\\"birthday\\\": {      \\\"type\\\": \\\"string\\\",      \\\"format\\\": \\\"email\\\"    },    \\\"title\\\": {      \\\"type\\\": \\\"string\\\"    }  },  \\\"searchable\\\": [\\\"birthday\\\",\\\"title\\\"],  \\\"suggestible\\\": [\\\"email\\\"],  \\\"required\\\": [\\\"title\\\"]}",
			"type": "string"
		},
		{
			"key": "invalidAppConfigMissingSchemaUrl",
			"value": "{  \\\"properties\\\": {    \\\"birthday\\\": {      \\\"type\\\": \\\"string\\\",      \\\"format\\\": \\\"email\\\"    },    \\\"title\\\": {      \\\"type\\\": \\\"string\\\"    }  },  \\\"searchable\\\": [\\\"birthday\\\",\\\"title\\\"],  \\\"suggestible\\\": [\\\"title\\\"],  \\\"required\\\": [\\\"title\\\"]}",
			"type": "string"
		},
		{
			"key": "invalidAppConfigSchemaUrl",
			"value": "{  \\\"$schema\\\": \\\"directory-service-schemas.s3.amazonaws.com/app-schema-01.json\\\",  \\\"properties\\\": {    \\\"birthday\\\": {      \\\"type\\\": \\\"string\\\",      \\\"format\\\": \\\"email\\\"    },    \\\"title\\\": {      \\\"type\\\": \\\"string\\\"    }  },  \\\"searchable\\\": [\\\"birthday\\\",\\\"title\\\"],  \\\"suggestible\\\": [\\\"title\\\"],  \\\"required\\\": [\\\"title\\\"]}",
			"type": "string"
		},
		{
			"key": "validAppConfig",
			"value": "{  \\\"$schema\\\": \\\"https://directory-service-schemas.s3.amazonaws.com/app-schema-01.json\\\",  \\\"properties\\\": {    \\\"birthday\\\": {      \\\"type\\\": \\\"string\\\",      \\\"format\\\": \\\"email\\\"    },    \\\"title\\\": {      \\\"type\\\": \\\"string\\\"    }  },  \\\"searchable\\\": [\\\"birthday\\\",\\\"title\\\"],  \\\"suggestible\\\": [\\\"title\\\"],  \\\"required\\\": [\\\"title\\\"]}",
			"type": "string"
		},
		{
			"key": "validUpdatedAppConfigSchema",
			"value": "{  \\\"$schema\\\": \\\"https://directory-service-schemas.s3.amazonaws.com/app-schema-01.json\\\",  \\\"properties\\\": {    \\\"secondaryEmail\\\": {      \\\"type\\\": \\\"string\\\",      \\\"format\\\": \\\"email\\\"    },    \\\"phone\\\": {      \\\"type\\\": \\\"string\\\"    },    \\\"title\\\": {      \\\"type\\\": \\\"string\\\"    }  },  \\\"searchable\\\": [\\\"title\\\",\\\"phone\\\"],  \\\"suggestible\\\": [\\\"title\\\"],  \\\"required\\\": [\\\"title\\\"]}",
			"type": "string"
		},
		{
			"key": "apiEndpoint",
			"value": "https://drxdqoid5bg73dgrh6ycozby5i.appsync-api.us-east-1.amazonaws.com/graphql",
			"type": "string"
		},
		{
			"key": "chessAppConfig",
			"value": "{  \\\"$schema\\\": \\\"https://directory-service-schemas.s3.amazonaws.com/app-schema-01.json\\\",  \\\"properties\\\": {    \\\"username\\\": {      \\\"type\\\": \\\"string\\\"   },    \\\"ranking\\\": {      \\\"type\\\": \\\"integer\\\"    }  },  \\\"searchable\\\": [\\\"username\\\"],  \\\"suggestible\\\": [\\\"username\\\"],  \\\"required\\\": [\\\"username\\\", \\\"ranking\\\"]}",
			"type": "string"
		},
		{
			"key": "sococoAppConfig",
			"value": "{  \\\"$schema\\\": \\\"https://directory-service-schemas.s3.amazonaws.com/app-schema-01.json\\\",  \\\"properties\\\": {    \\\"birthday\\\": {      \\\"type\\\": \\\"string\\\"   },    \\\"title\\\": {      \\\"type\\\": \\\"string\\\"    }  },  \\\"searchable\\\": [\\\"birthday\\\",\\\"title\\\"],  \\\"suggestible\\\": [\\\"title\\\"],  \\\"required\\\": [\\\"title\\\"]}",
			"type": "string"
		},
		{
			"key": "updatedSococoAppConfig",
			"value": "{  \\\"$schema\\\": \\\"https://directory-service-schemas.s3.amazonaws.com/app-schema-01.json\\\",  \\\"properties\\\": {    \\\"birthday\\\": {      \\\"type\\\": \\\"string\\\"   },    \\\"sococoName\\\": {      \\\"type\\\": \\\"string\\\"   },\\\"title\\\": {      \\\"type\\\": \\\"string\\\"    }  },  \\\"searchable\\\": [\\\"birthday\\\",\\\"title\\\"],  \\\"suggestible\\\": [\\\"title\\\"],  \\\"required\\\": [\\\"title\\\", \\\"sococoName\\\"]}",
			"type": "string"
		},
		{
			"key": "m3JoeId",
			"value": "01G6QY253FD1BDB9X50XB5V864",
			"type": "string"
		},
		{
			"key": "chessAppId",
			"value": "01GDMJQ433F9M5JCYGANG9J06T",
			"type": "string"
		},
		{
			"key": "sococoAppId",
			"value": "01GDMXMDSZZVE4TWZ7JF8PRGA2",
			"type": "string"
		},
		{
			"key": "m4AppId",
			"value": "01G6QY0CCRZWFASF8ZKT8SK11W",
			"type": "string"
		},
		{
			"key": "examplePersonId",
			"value": "00000000000000000000000002",
			"type": "string"
		},
		{
			"key": "janeId",
			"value": "01G6QY2MAS5HZSX9KX21EMED6Q",
			"type": "string"
		},
		{
			"key": "targetOrgId",
			"value": "01GD30BPQYPFM0W95F32RHE82X",
			"type": "string"
		},
		{
			"key": "apiKey",
			"value": "da2-dgei4vc4mrapbpwhv46z6sc2c4"
		},
		{
			"key": "sococoPersonId",
			"value": "01GD3094PS4N8BG2XHE1Y80E9S",
			"type": "string"
		},
		{
			"key": "parentGroupId",
			"value": "01GD312FBN1KKQ4EVR862QX5Q0",
			"type": "string"
		},
		{
			"key": "childGroupId",
			"value": "01GD31NKB2ZVWHNACCRW8ZAMCX",
			"type": "string"
		},
		{
			"key": "anotherOrgId",
			"value": "01GD31R81QBZDTDV87CB4A1N9Z",
			"type": "string"
		},
		{
			"key": "anotherGroupId",
			"value": "01GD31TPA6KPC8CQG69VF8VY4V",
			"type": "string"
		},
		{
			"key": "m4JoeId",
			"value": "01GDK6D9014XJVQ07MVJCTX16G",
			"type": "string"
		},
		{
			"key": "m5AppId",
			"value": "01GDMXMDSZZVE4TWZ7JF8PRGA2",
			"type": "string"
		},
		{
			"key": "m5JoeId",
			"value": "01GDMJSYW9KBHJGBK4TSRS6K1M",
			"type": "string"
		},
		{
			"key": "m5JaneId",
			"value": "01GDMZZWJ0ZRM8MP9J4G13QJ23",
			"type": "string"
		},
		{
			"key": "m3AnOrgId",
			"value": "01GDKB6SQAN0V8HHNADD52QKHS",
			"type": "string"
		},
		{
			"key": "m3OtherOrgId",
			"value": "01GDKB9S3KRPZV71HXRKV6AFHV",
			"type": "string"
		},
		{
			"key": "m3OrgJoeId",
			"value": "01GDN6SEN7FMGQGDZNW1S2CM6V",
			"type": "string"
		},
		{
			"key": "m5AnOrgId",
			"value": "01GDMN3JSA5H5VT9700F5TCYT1",
			"type": "string"
		},
		{
			"key": "m5OtherOrgId",
			"value": "01GDPDSNP1E17MMA16JZFMJK74",
			"type": "string"
		},
		{
			"key": "m5OrgJoeId",
			"value": "01GDPDTES9WN81H8892C2F3Y7F",
			"type": "string"
		},
		{
			"key": "m3OrgJaneId",
			"value": "01GDN7J78AJN4AFJ9A7FGWA4YG",
			"type": "string"
		},
		{
			"key": "m3OrgJudeId",
			"value": "01GDN7MZXEMXSRT1W0D3DR5QHF",
			"type": "string"
		},
		{
			"key": "m5OrgJaneId",
			"value": "01GDPDV5726GXG90RCG23GVNN7",
			"type": "string"
		},
		{
			"key": "m5GroupId",
			"value": ""
		},
		{
			"key": "m5Group2Id",
			"value": ""
		},
		{
			"key": "exampleOrgId",
			"value": "",
			"type": "string"
		},
		{
			"key": "m5Group3Id",
			"value": ""
		},
		{
			"key": "m5Group4Id",
			"value": ""
		}
	]
}